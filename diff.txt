diff --git a/docker-compose.yml b/docker-compose.yml
index ba0f69c..aecaf9f 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -9,3 +9,9 @@ services:
       POSTGRES_HOST_AUTH_METHOD: trust # No PW required
     ports:
       - '5432:5432'
+
+  redis:
+    image: redis:7.0-alpine
+    restart: unless-stopped
+    ports:
+      - 6379:6379

diff --git a/package.json b/package.json
index 339b6a4..69a790a 100644
--- a/package.json
+++ b/package.json
@@ -13,27 +13,37 @@
     "db:drop": "dotenv -e .env.local tsx src/lib/db/scripts/drop.ts",
     "db:reset": "npm run db:drop && npm run db:migrate && npm run db:generate",
     "db:seed-dev": "dotenv -e .env.local tsx src/lib/db/seeders/seed-dev.ts",
+    "worker:default": "dotenv -e .env.local tsx -- --watch src/queue/default-worker.ts",
     "format": "next lint --fix && prettier --write --ignore-path .gitignore .",
     "typecheck": "tsc --noEmit"
   },
   "dependencies": {
     "@clerk/nextjs": "^4.29.9",
+    "@langchain/core": "^0.1.51",
+    "@langchain/openai": "^0.0.23",
     "@radix-ui/react-accordion": "^1.1.2",
     "@radix-ui/react-avatar": "^1.0.4",
+    "@radix-ui/react-dialog": "^1.0.5",
     "@radix-ui/react-dropdown-menu": "^2.0.6",
     "@radix-ui/react-icons": "^1.3.0",
+    "@radix-ui/react-navigation-menu": "^1.1.4",
     "@radix-ui/react-popover": "^1.0.7",
     "@radix-ui/react-slot": "^1.0.2",
     "@radix-ui/react-tabs": "^1.0.4",
     "@radix-ui/react-tooltip": "^1.0.7",
+    "@slack/bolt": "^3.17.1",
     "@tanstack/react-table": "^8.15.0",
+    "bullmq": "^5.4.6",
     "class-variance-authority": "^0.7.0",
     "clsx": "^2.1.0",
     "date-fns": "^3.6.0",
+    "install": "^0.13.0",
+    "ioredis": "^5.3.2",
     "kysely": "^0.27.3",
     "lucide-react": "^0.358.0",
     "ms": "^2.1.3",
     "next": "14.1.3",
+    "npm": "^10.5.0",
     "octokit": "^3.1.2",
     "pg": "^8.11.3",
     "pg-connection-from-env": "^1.1.0",

diff --git a/public/about-img.png b/public/about-img.png
new file mode 100644
index 0000000..e190bb2
Binary files /dev/null and b/public/about-img.png differ

diff --git a/src/api/github/setup/route.ts b/src/api/github/setup/route.ts
deleted file mode 100644
index e69de29..0000000

diff --git a/src/app/(user)/_components/InstallPage.tsx b/src/app/(user)/_components/InstallPage.tsx
deleted file mode 100644
index 7da0fc6..0000000
--- a/src/app/(user)/_components/InstallPage.tsx
+++ /dev/null
@@ -1,21 +0,0 @@
-import { Button } from '@/lib/ui/Button'
-
-export default function InstallPage() {
-  return (
-    <div className="text-center mt-6">
-      <h2 className="text-3xl font-bold tracking-tight">Welcome to Void.</h2>
-      <p className="text-muted-foreground text-xs">
-        (we hope you&apos;ll like it here)
-      </p>
-      <p className="my-3">
-        Click the button below to got to install the Github App, and link your
-        repositories.
-      </p>
-      <a
-        href={`https://github.com/apps/${process.env.GITHUB_APP_NAME}/installations/new`}
-      >
-        <Button>Install Github App</Button>
-      </a>
-    </div>
-  )
-}

diff --git a/src/app/(user)/_components/SetupPage.tsx b/src/app/(user)/_components/SetupPage.tsx
new file mode 100644
index 0000000..a16d201
--- /dev/null
+++ b/src/app/(user)/_components/SetupPage.tsx
@@ -0,0 +1,48 @@
+import { Organization } from '@/lib/db/types'
+import { Button } from '@/lib/ui/Button'
+
+interface SetupPageProps {
+  organization: Organization
+  slackTeamId?: string | null
+  githubInstallId?: number | null
+}
+
+export default function SetupPage(props: SetupPageProps) {
+  const { githubInstallId, organization } = props
+
+  return (
+    <div className="text-center mt-6">
+      <h2 className="text-3xl font-bold tracking-tight">Welcome to Void.</h2>
+      <p className="text-muted-foreground text-xs">
+        (we hope you&apos;ll like it here)
+      </p>
+      <p className="my-3">
+        Install the Void Github, and Void Slack App to get started.
+      </p>
+      <div className="flex flex-col gap-3">
+        <a
+          href={`https://github.com/apps/${process.env.GITHUB_APP_NAME}/installations/new?state=${organization.id}`}
+          style={{
+            pointerEvents: githubInstallId ? 'none' : 'all', // disable
+          }}
+        >
+          <Button
+            variant={'outline'}
+            className="w-[180px]"
+            disabled={!!githubInstallId}
+          >
+            Install Github App
+          </Button>
+        </a>
+
+        <a
+          href={`https://slack.com/oauth/v2/authorize?client_id=${process.env.SLACK_CLIENT_ID}&scope=app_mentions:read,channels:history,chat:write,commands,groups:history,incoming-webhook,users:read&user_scope=&state=${organization.id}`}
+        >
+          <Button variant={'outline'} className="w-[180px]">
+            Install Slack App
+          </Button>
+        </a>
+      </div>
+    </div>
+  )
+}

diff --git a/src/app/(user)/layout.tsx b/src/app/(user)/layout.tsx
index 8498d69..d8335af 100644
--- a/src/app/(user)/layout.tsx
+++ b/src/app/(user)/layout.tsx
@@ -1,6 +1,6 @@
 import AppBar from '@/app/(user)/AppBar'
 import Content from '@/app/(user)/Content'
-import InstallPage from '@/app/(user)/_components/InstallPage'
+import SetupPage from '@/app/(user)/_components/SetupPage'
 import { MainNav } from '@/app/(user)/_components/MainNav'
 import { dbClient } from '@/lib/db/client'
 import { auth, clerkClient } from '@clerk/nextjs'
@@ -22,15 +22,52 @@ export default async function UserLayout(props: UserLayoutProps) {
 
   const organization = await dbClient
     .selectFrom('voidpm.organization')
-    .where('ext_clerk_user_id', '=', userId)
+    .leftJoin(
+      'github.organization',
+      'github.organization.organization_id',
+      'voidpm.organization.id',
+    )
+    .leftJoin(
+      'slack.workspace',
+      'slack.workspace.organization_id',
+      'voidpm.organization.id',
+    )
+    .selectAll('voidpm.organization')
+    .select([
+      'github.organization.ext_gh_install_id',
+      'slack.workspace.ext_slack_team_id',
+    ])
     .executeTakeFirst()
 
   if (!organization) {
+    const newOrganization = await dbClient
+      .insertInto('voidpm.organization')
+      .values({
+        ext_clerk_user_id: userId,
+      })
+      .returningAll()
+      .executeTakeFirstOrThrow()
+
+    return (
+      <div className="flex flex-col">
+        <AppBar user={user} />
+        <Content>
+          <SetupPage organization={newOrganization} />
+        </Content>
+      </div>
+    )
+  }
+
+  if (!organization.ext_slack_team_id || !organization.ext_gh_install_id) {
     return (
       <div className="flex flex-col">
         <AppBar user={user} />
         <Content>
-          <InstallPage />
+          <SetupPage
+            organization={organization}
+            slackTeamId={organization.ext_slack_team_id}
+            githubInstallId={organization.ext_gh_install_id}
+          />
         </Content>
       </div>
     )

diff --git a/src/app/_components/About.tsx b/src/app/_components/About.tsx
new file mode 100644
index 0000000..732d5e4
--- /dev/null
+++ b/src/app/_components/About.tsx
@@ -0,0 +1,40 @@
+import { Statistics } from './Statistics'
+import pilot from '../assets/pilot.png'
+import Image from 'next/image'
+
+export const About = () => {
+  return (
+    <section id="about" className="container py-24 sm:py-32">
+      <div className="bg-muted/50 border rounded-lg py-12">
+        <div className="px-6 flex flex-col-reverse md:flex-row gap-8 md:gap-12">
+          <Image
+            src="/about-img.png"
+            alt=""
+            className="w-[300px] object-contain rounded-lg"
+            width={300}
+            height={300}
+          />
+          <div className="bg-green-0 flex flex-col justify-between">
+            <div className="pb-6">
+              <h2 className="text-3xl md:text-4xl font-bold">
+                <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+                  Why
+                </span>{' '}
+                Void?
+              </h2>
+              <p className="text-xl text-muted-foreground mt-4">
+                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
+                eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
+                enim ad minim veniam, quis nostrud exercitation ullamco laboris
+                nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit
+                amet, consectetur adipiscing elit.
+              </p>
+            </div>
+
+            <Statistics />
+          </div>
+        </div>
+      </div>
+    </section>
+  )
+}

diff --git a/src/app/_components/Cta.tsx b/src/app/_components/Cta.tsx
new file mode 100644
index 0000000..305274f
--- /dev/null
+++ b/src/app/_components/Cta.tsx
@@ -0,0 +1,38 @@
+import { Button } from "./ui/button";
+
+export const Cta = () => {
+  return (
+    <section
+      id="cta"
+      className="bg-muted/50 py-16 my-24 sm:my-32"
+    >
+      <div className="container lg:grid lg:grid-cols-2 place-items-center">
+        <div className="lg:col-start-1">
+          <h2 className="text-3xl md:text-4xl font-bold ">
+            All Your
+            <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+              {" "}
+              Ideas & Concepts{" "}
+            </span>
+            In One Interface
+          </h2>
+          <p className="text-muted-foreground text-xl mt-4 mb-8 lg:mb-0">
+            Lorem ipsum dolor sit amet consectetur adipisicing elit. Eaque,
+            beatae. Ipsa tempore ipsum iste quibusdam illum ducimus eos. Quasi,
+            sed!
+          </p>
+        </div>
+
+        <div className="space-y-4 lg:col-start-2">
+          <Button className="w-full md:mr-4 md:w-auto">Request a Demo</Button>
+          <Button
+            variant="outline"
+            className="w-full md:w-auto"
+          >
+            View all features
+          </Button>
+        </div>
+      </div>
+    </section>
+  );
+};

diff --git a/src/app/_components/FAQ.tsx b/src/app/_components/FAQ.tsx
new file mode 100644
index 0000000..e6e0676
--- /dev/null
+++ b/src/app/_components/FAQ.tsx
@@ -0,0 +1,80 @@
+import {
+  Accordion,
+  AccordionContent,
+  AccordionItem,
+  AccordionTrigger,
+} from '@/lib/ui/Accordion'
+
+interface FAQProps {
+  question: string
+  answer: string
+  value: string
+}
+
+const FAQList: FAQProps[] = [
+  {
+    question: 'Is this template free?',
+    answer: 'Yes. It is a free ChadcnUI template.',
+    value: 'item-1',
+  },
+  {
+    question: 'Lorem ipsum dolor sit amet consectetur adipisicing elit?',
+    answer:
+      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sint labore quidem quam? Consectetur sapiente iste rerum reiciendis animi nihil nostrum sit quo, modi quod.',
+    value: 'item-2',
+  },
+  {
+    question:
+      'Lorem ipsum dolor sit amet  Consectetur natus dolores minus quibusdam?',
+    answer:
+      'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Labore qui nostrum reiciendis veritatis necessitatibus maxime quis ipsa vitae cumque quo?',
+    value: 'item-3',
+  },
+  {
+    question: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit?',
+    answer: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit.',
+    value: 'item-4',
+  },
+  {
+    question:
+      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur natus?',
+    answer:
+      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sint labore quidem quam? Consectetur sapiente iste rerum reiciendis animi nihil nostrum sit quo, modi quod.',
+    value: 'item-5',
+  },
+]
+
+export const FAQ = () => {
+  return (
+    <section id="faq" className="container py-24 sm:py-32">
+      <h2 className="text-3xl md:text-4xl font-bold mb-4">
+        Frequently Asked{' '}
+        <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+          Questions
+        </span>
+      </h2>
+
+      <Accordion type="single" collapsible className="w-full AccordionRoot">
+        {FAQList.map(({ question, answer, value }: FAQProps) => (
+          <AccordionItem key={value} value={value}>
+            <AccordionTrigger className="text-left">
+              {question}
+            </AccordionTrigger>
+
+            <AccordionContent>{answer}</AccordionContent>
+          </AccordionItem>
+        ))}
+      </Accordion>
+
+      <h3 className="font-medium mt-4">
+        Still have questions?{' '}
+        <a
+          href="#"
+          className="text-primary transition-all border-primary hover:border-b-2"
+        >
+          Contact us
+        </a>
+      </h3>
+    </section>
+  )
+}

diff --git a/src/app/_components/Features.tsx b/src/app/_components/Features.tsx
new file mode 100644
index 0000000..df0c802
--- /dev/null
+++ b/src/app/_components/Features.tsx
@@ -0,0 +1,99 @@
+import { Badge } from "./ui/badge";
+import {
+  Card,
+  CardContent,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+import image from "../assets/growth.png";
+import image3 from "../assets/reflecting.png";
+import image4 from "../assets/looking-ahead.png";
+
+interface FeatureProps {
+  title: string;
+  description: string;
+  image: string;
+}
+
+const features: FeatureProps[] = [
+  {
+    title: "Responsive Design",
+    description:
+      "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi nesciunt est nostrum omnis ab sapiente.",
+    image: image4,
+  },
+  {
+    title: "Intuitive user interface",
+    description:
+      "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi nesciunt est nostrum omnis ab sapiente.",
+    image: image3,
+  },
+  {
+    title: "AI-Powered insights",
+    description:
+      "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi nesciunt est nostrum omnis ab sapiente.",
+    image: image,
+  },
+];
+
+const featureList: string[] = [
+  "Dark/Light theme",
+  "Reviews",
+  "Features",
+  "Pricing",
+  "Contact form",
+  "Our team",
+  "Responsive design",
+  "Newsletter",
+  "Minimalist",
+];
+
+export const Features = () => {
+  return (
+    <section
+      id="features"
+      className="container py-24 sm:py-32 space-y-8"
+    >
+      <h2 className="text-3xl lg:text-4xl font-bold md:text-center">
+        Many{" "}
+        <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+          Great Features
+        </span>
+      </h2>
+
+      <div className="flex flex-wrap md:justify-center gap-4">
+        {featureList.map((feature: string) => (
+          <div key={feature}>
+            <Badge
+              variant="secondary"
+              className="text-sm"
+            >
+              {feature}
+            </Badge>
+          </div>
+        ))}
+      </div>
+
+      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
+        {features.map(({ title, description, image }: FeatureProps) => (
+          <Card key={title}>
+            <CardHeader>
+              <CardTitle>{title}</CardTitle>
+            </CardHeader>
+
+            <CardContent>{description}</CardContent>
+
+            <CardFooter>
+              <img
+                src={image}
+                alt="About feature"
+                className="w-[200px] lg:w-[300px] mx-auto"
+              />
+            </CardFooter>
+          </Card>
+        ))}
+      </div>
+    </section>
+  );
+};

diff --git a/src/app/_components/Footer.tsx b/src/app/_components/Footer.tsx
new file mode 100644
index 0000000..0fcad37
--- /dev/null
+++ b/src/app/_components/Footer.tsx
@@ -0,0 +1,154 @@
+import { LogoIcon } from "./Icons";
+
+export const Footer = () => {
+  return (
+    <footer id="footer">
+      <hr className="w-11/12 mx-auto" />
+
+      <section className="container py-20 grid grid-cols-2 md:grid-cols-4 xl:grid-cols-6 gap-x-12 gap-y-8">
+        <div className="col-span-full xl:col-span-2">
+          <a
+            href="/"
+            className="font-bold text-xl flex"
+          >
+            <LogoIcon />
+            ShadcnUI/React
+          </a>
+        </div>
+
+        <div className="flex flex-col gap-2">
+          <h3 className="font-bold text-lg">Follow US</h3>
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Github
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Twitter
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Dribbble
+            </a>
+          </div>
+        </div>
+
+        <div className="flex flex-col gap-2">
+          <h3 className="font-bold text-lg">Platforms</h3>
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Web
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Mobile
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Desktop
+            </a>
+          </div>
+        </div>
+
+        <div className="flex flex-col gap-2">
+          <h3 className="font-bold text-lg">About</h3>
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Features
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Pricing
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              FAQ
+            </a>
+          </div>
+        </div>
+
+        <div className="flex flex-col gap-2">
+          <h3 className="font-bold text-lg">Community</h3>
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Youtube
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Discord
+            </a>
+          </div>
+
+          <div>
+            <a
+              href="#"
+              className="opacity-60 hover:opacity-100"
+            >
+              Twitch
+            </a>
+          </div>
+        </div>
+      </section>
+
+      <section className="container pb-14 text-center">
+        <h3>
+          &copy; 2024 Landing page made by{" "}
+          <a
+            target="_blank"
+            href="https://github.com/leoMirandaa"
+            className="text-primary transition-all border-primary hover:border-b-2"
+          >
+            Leo Miranda
+          </a>
+        </h3>
+      </section>
+    </footer>
+  );
+};

diff --git a/src/app/_components/Hero.tsx b/src/app/_components/Hero.tsx
new file mode 100644
index 0000000..4e72ae6
--- /dev/null
+++ b/src/app/_components/Hero.tsx
@@ -0,0 +1,39 @@
+import { Button, buttonVariants } from '@/lib/ui/Button'
+import { HeroCards } from './HeroCards'
+import { GitHubLogoIcon } from '@radix-ui/react-icons'
+
+export const Hero = () => {
+  return (
+    <section className="container grid lg:grid-cols-2 place-items-center py-20 md:py-32 gap-10">
+      <div className="text-center lg:text-start space-y-6">
+        <main className="text-5xl md:text-6xl font-bold">
+          <h1 className="inline">
+            <span className="">AI project management tool</span>{' '}
+          </h1>{' '}
+          for teams that{' '}
+          <h2 className="inline">
+            {/* <span className="inline bg-gradient-to-r from-[#61DAFB] via-[#1fc0f1] to-[#03a3d7] text-transparent bg-clip-text"> */}
+            <span className="inline bg-gradient-to-r from-[#61DAFB]  to-[#D247BF] text-transparent bg-clip-text">
+              ship fast
+            </span>{' '}
+          </h2>
+        </main>
+
+        <p className="text-xl text-muted-foreground md:w-10/12 mx-auto lg:mx-0">
+          Github, Slack Asana integration that automates the boring stuff,
+          answers your questions, and always know what&apos;s going on.
+        </p>
+
+        <div className="space-y-4 md:space-y-0 md:space-x-4">
+          <Button className="w-full md:w-1/3">Find Out More</Button>
+        </div>
+      </div>
+
+      {/* Hero cards sections */}
+      <div className="z-10">{/* <HeroCards /> */}</div>
+
+      {/* Shadow effect */}
+      <div className="shadow"></div>
+    </section>
+  )
+}

diff --git a/src/app/_components/HeroCards.tsx b/src/app/_components/HeroCards.tsx
new file mode 100644
index 0000000..b48809e
--- /dev/null
+++ b/src/app/_components/HeroCards.tsx
@@ -0,0 +1,161 @@
+import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar'
+import { Badge } from './ui/badge'
+import { Check, Linkedin } from 'lucide-react'
+import { LightBulbIcon } from './Icons'
+import { GitHubLogoIcon } from '@radix-ui/react-icons'
+import {
+  Card,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from '@/lib/ui/Card'
+import { CardContent } from '@/app/_components/ui/card'
+import { Button, buttonVariants } from '@/lib/ui/Button'
+
+export const HeroCards = () => {
+  return (
+    <div className="hidden lg:flex flex-row flex-wrap gap-8 relative w-[700px] h-[500px]">
+      {/* Testimonial */}
+      <Card className="absolute w-[340px] -top-[15px] drop-shadow-xl shadow-black/10 dark:shadow-white/10">
+        <CardHeader className="flex flex-row items-center gap-4 pb-2">
+          <Avatar>
+            <AvatarImage alt="" src="https://github.com/shadcn.png" />
+            <AvatarFallback>SH</AvatarFallback>
+          </Avatar>
+
+          <div className="flex flex-col">
+            <CardTitle className="text-lg">John Doe React</CardTitle>
+            <CardDescription>@john_doe</CardDescription>
+          </div>
+        </CardHeader>
+
+        <CardContent>This landig page is awesome!</CardContent>
+      </Card>
+
+      {/* Team */}
+      <Card className="absolute right-[20px] top-4 w-80 flex flex-col justify-center items-center drop-shadow-xl shadow-black/10 dark:shadow-white/10">
+        <CardHeader className="mt-8 flex justify-center items-center pb-2">
+          <img
+            src="https://i.pravatar.cc/150?img=58"
+            alt="user avatar"
+            className="absolute grayscale-[0%] -top-12 rounded-full w-24 h-24 aspect-square object-cover"
+          />
+          <CardTitle className="text-center">Leo Miranda</CardTitle>
+          <CardDescription className="font-normal text-primary">
+            Frontend Developer
+          </CardDescription>
+        </CardHeader>
+
+        <CardContent className="text-center pb-2">
+          <p>
+            I really enjoy transforming ideas into functional software that
+            exceeds expectations
+          </p>
+        </CardContent>
+
+        <CardFooter>
+          <div>
+            <a
+              href="https://github.com/leoMirandaa"
+              target="_blank"
+              className={buttonVariants({
+                variant: 'ghost',
+                size: 'sm',
+              })}
+            >
+              <span className="sr-only">Github icon</span>
+              <GitHubLogoIcon className="w-5 h-5" />
+            </a>
+            <a
+              href="https://twitter.com/leo_mirand4"
+              target="_blank"
+              className={buttonVariants({
+                variant: 'ghost',
+                size: 'sm',
+              })}
+            >
+              <span className="sr-only">X icon</span>
+              <svg
+                role="img"
+                viewBox="0 0 24 24"
+                xmlns="http://www.w3.org/2000/svg"
+                className="fill-foreground w-5 h-5"
+              >
+                <title>X</title>
+                <path d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z" />
+              </svg>
+            </a>
+
+            <a
+              href="https://www.linkedin.com/"
+              target="_blank"
+              className={buttonVariants({
+                variant: 'ghost',
+                size: 'sm',
+              })}
+            >
+              <span className="sr-only">Linkedin icon</span>
+              <Linkedin size="20" />
+            </a>
+          </div>
+        </CardFooter>
+      </Card>
+
+      {/* Pricing */}
+   
diff --git a/src/app/_components/HowItWorks.tsx b/src/app/_components/HowItWorks.tsx
new file mode 100644
index 0000000..46a0d83
--- /dev/null
+++ b/src/app/_components/HowItWorks.tsx
@@ -0,0 +1,72 @@
+import { Card, CardContent, CardHeader, CardTitle } from '@/lib/ui/Card'
+import {
+  MedalIcon,
+  MapIcon,
+  PlaneIcon,
+  GiftIcon,
+} from '@/app/_components/Icons'
+
+interface FeatureProps {
+  icon: JSX.Element
+  title: string
+  description: string
+}
+
+const features: FeatureProps[] = [
+  {
+    icon: <MedalIcon />,
+    title: 'Accesibility',
+    description:
+      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illum quas provident cum',
+  },
+  {
+    icon: <MapIcon />,
+    title: 'Community',
+    description:
+      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illum quas provident cum',
+  },
+  {
+    icon: <PlaneIcon />,
+    title: 'Scalability',
+    description:
+      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illum quas provident cum',
+  },
+  {
+    icon: <GiftIcon />,
+    title: 'Gamification',
+    description:
+      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illum quas provident cum',
+  },
+]
+
+export const HowItWorks = () => {
+  return (
+    <section id="howItWorks" className="container text-center py-24 sm:py-32">
+      <h2 className="text-3xl md:text-4xl font-bold ">
+        How It{' '}
+        <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+          Works{' '}
+        </span>
+        Step-by-Step Guide
+      </h2>
+      <p className="md:w-3/4 mx-auto mt-4 mb-8 text-xl text-muted-foreground">
+        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Veritatis
+        dolor pariatur sit!
+      </p>
+
+      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
+        {features.map(({ icon, title, description }: FeatureProps) => (
+          <Card key={title} className="bg-muted/50">
+            <CardHeader>
+              <CardTitle className="grid gap-4 place-items-center">
+                {icon}
+                {title}
+              </CardTitle>
+            </CardHeader>
+            <CardContent>{description}</CardContent>
+          </Card>
+        ))}
+      </div>
+    </section>
+  )
+}

diff --git a/src/app/_components/Icons.tsx b/src/app/_components/Icons.tsx
new file mode 100644
index 0000000..d2afc56
--- /dev/null
+++ b/src/app/_components/Icons.tsx
@@ -0,0 +1,664 @@
+export const LogoIcon = () => {
+  return (
+    <svg
+      xmlns="http://www.w3.org/2000/svg"
+      viewBox="0 0 24 24"
+      fill="none"
+      stroke="currentColor"
+      strokeWidth="2"
+      strokeLinecap="round"
+      strokeLinejoin="round"
+      className="lucide lucide-panels-top-left mr-2 w-6 h-6"
+    >
+      <rect
+        width="18"
+        height="18"
+        x="3"
+        y="3"
+        rx="2"
+      />
+      <path d="M3 9h18" />
+      <path d="M9 21V9" />
+    </svg>
+  );
+};
+
+export const MedalIcon = () => {
+  return (
+    <svg
+      xmlns="http://www.w3.org/2000/svg"
+      viewBox="0 0 128 128"
+      className="w-14 fill-primary"
+    >
+      <title>Free Icons</title>
+      <g
+        id="Layer_8"
+        data-name="Layer 8"
+      >
+        <path
+          className="cls-1"
+          d="M60.59,60.42a2.14,2.14,0,0,1,1.89-2.06c.39-.06,1,.63,1.11.72a10,10,0,0,1,.19,1.42c0,.24-.62,5.27-1,7.2-.07.35-.15.7-.26,1.07a7.47,7.47,0,0,1-.27.78,9.1,9.1,0,0,1-.39.84,4.27,4.27,0,0,1-1.17,1.36,4.23,4.23,0,0,1-1.67.59l-1,.08-.56.06q-1.2.15-2.4.36c-.39.07-.82.15-1.17.23h0s0,0,0,0a.21.21,0,0,0-.12.07.16.16,0,0,0,0,.1.38.38,0,0,0,.07.08l0,0,.1.06.19.12c.53.33,1.08.63,1.63.91s1.12.55,1.69.79c.16.07.86.36,1.42.54a2.93,2.93,0,0,1,1.54.74c.11.11.2.22.27.3a2,2,0,0,1,.24.43,7.33,7.33,0,0,1,.31,1,8.28,8.28,0,0,1-.29,2.83l-.13.65c0,.09,0,0,0,.06s0,0,0,0,0,.08-.13.22a4.36,4.36,0,0,0-.31.53.48.48,0,0,0-.08.23c0,.1.1.12.28.1l.12,0c.07,0,.14-.14.22,0,.22.31.56,0,1-.27A28.33,28.33,0,0,1,64.33,81a7.59,7.59,0,0,1,1.44-.47c.44-.12.57.47.48.61-.25.4.19.41.36.57a.65.65,0,0,1,.15.2,26,26,0,0,1-2,2.19l-.77.8-.19.2-.23.22-.56.51c-.68.62-1.4,1.26-1.6,1.41l-.52.41c-.38.33-1,.81-2.05,1.76l-1,.89a2.29,2.29,0,0,1-.32.26l-.26.12-.57.26a3.11,3.11,0,0,1-.3.12l-.23,0-.47.09a1.41,1.41,0,0,1-.52-.15l-.1-.08c-.07,0-.2-.09-.27-.13a1.06,1.06,0,0,1-.41-.38,2.31,2.31,0,0,1-.23-.54c-.07-.17-.15-.27-.18-.35a3.44,3.44,0,0,1,.19-2.09l1.5-6.45.11-.54.06-.3c0-.08,0-.24,0-.25h0s0,0,0,0a.08.08,0,0,0,0,0s0,0,0,0h0l-.21-.09a8.47,8.47,0,0,1-1.86-1.09,3.65,3.65,0,0,0-.75-.41l-.83-.4-.41-.22-.53-.29a21.28,21.28,0,0,1-2.69-1.73,5.94,5.94,0,0,1-1.74-2,3.49,3.49,0,0,1-.31-1,3.12,3.12,0,0,1,0-.54c0-.2.14-.41.13-.59a2,2,0,0,1,.56-.91l.38-.4A1.83,1.83,0,0,1,47.9,70l.55-.35c.19-.11.44-.2.66-.3a11,11,0,0,1,1.47-.51,10.53,10.53,0,0,1,1.17-.23l1.32-.22c.83-.18,1.67-.32,2.51-.43l1.27-.15.64-.06.26,0a.36.36,0,0,0,.18,0,.29.29,0,0,0,.11-.16.64.64,0,0,0,.06-.18c.06-.2.14-.47.2-.73.15-.51,1.23-3.38,1.33-4.15C59.69,62.05,60.59,60.82,60.59,60.42Z"
+        />
+        <path
+          className="cls-2"
+          d="M56.23,92.36c-.24,0-.49,0-.73,0a4.27,4.27,0,0,1-.68-.18c-.22-.08-.42-.22-.63-.32a3.33,3.33,0,0,1-.48-.51A3.4,3.4,0,0,1,53.23,90c0-.25,0-.49-.07-.74v-.49a23,23,0,0,1,.39-3.43c.19-1.1.41-2.18.66-3.25l.39-1.6.08-.32,0-.07.05-.15s-.08-.06-.12-.09l-.07,0-.15-.06-1.57-.6a26.61,26.61,0,0,1-3.19-1.45,17.82,17.82,0,0,1-2.83-1.88,14.2,14.2,0,0,1-1.28-1.18L45,74c-.27-.3-.53-.73-.8-1.09a2.91,2.91,0,0,1-.34-1.23,2.5,2.5,0,0,1,1.54-1.85,9.67,9.67,0,0,1,1.91-.71,31.71,31.71,0,0,1,3.21-.68c1.07-.17,2.13-.31,3.2-.41.53-.05,1.07-.1,1.61-.13l.59,0h.29l1.88-5.28c.74-2,1.46-4,2.42-5.94l.18-.36c.08-.15.18-.3.28-.45a2.26,2.26,0,0,1,.7-.74A2.45,2.45,0,0,1,63.38,55a2.84,2.84,0,0,1,.82.4,4.36,4.36,0,0,1,.58.43,15.1,15.1,0,0,1,1.81,1.87c1.07,1.29,2,2.59,3,3.87.61.8,1.24,1.58,1.87,2.36l1,1.15c.18.21.33.38.5.55l.37-.18.87-.37c.66-.27,1.32-.52,2-.73a12.11,12.11,0,0,1,4.37-.7,1.82,1.82,0,0,1,1,.32c.19.14.24.26.18.37s-.6.33-1.17.62c-1.15.54-3,1.59-5.43,2.6l-.44.18L74,68c-.6.27-1.2.57-1.79.85L71,67.47l-.59-.71-.32-.39c-.42-.53-.84-1.05-1.24-1.58L66.5,61.61c-.79-1-1.57-2.09-2.36-3A8.65,8.65,0,0,0,63,57.48c-.12-.07-.07-.06-.08-.06l0,0a.06.06,0,0,0-.06,0s0,0,0,0l0,0-.14.26c-.19.37-.38.79-.57,1.21-.37.83-.7
diff --git a/src/app/_components/MobileMenu.tsx b/src/app/_components/MobileMenu.tsx
new file mode 100644
index 0000000..c5bc83a
--- /dev/null
+++ b/src/app/_components/MobileMenu.tsx
@@ -0,0 +1,69 @@
+'use client'
+
+import { useState } from 'react'
+import {
+  Sheet,
+  SheetContent,
+  SheetHeader,
+  SheetTitle,
+  SheetTrigger,
+} from '@/lib/ui/Sheet'
+
+import { Menu } from 'lucide-react'
+import { buttonVariants } from '@/lib/ui/Button'
+
+interface RouteProps {
+  href: string
+  label: string
+}
+
+const routeList: RouteProps[] = [
+  {
+    href: '#features',
+    label: 'Features',
+  },
+  {
+    href: '#testimonials',
+    label: 'Testimonials',
+  },
+  {
+    href: '#pricing',
+    label: 'Pricing',
+  },
+  {
+    href: '#faq',
+    label: 'FAQ',
+  },
+]
+
+export const MobileMenu = () => {
+  const [isOpen, setIsOpen] = useState(false)
+  return (
+    <Sheet open={isOpen} onOpenChange={setIsOpen}>
+      <SheetTrigger className="px-2">
+        <Menu
+          className="flex md:hidden h-5 w-5"
+          onClick={() => setIsOpen(true)}
+        ></Menu>
+      </SheetTrigger>
+
+      <SheetContent side={'left'}>
+        <SheetHeader>
+          <SheetTitle className="font-bold text-xl">Shadcn/React</SheetTitle>
+        </SheetHeader>
+        <nav className="flex flex-col justify-center items-center gap-2 mt-4">
+          {routeList.map(({ href, label }: RouteProps) => (
+            <a
+              key={label}
+              href={href}
+              onClick={() => setIsOpen(false)}
+              className={buttonVariants({ variant: 'ghost' })}
+            >
+              {label}
+            </a>
+          ))}
+        </nav>
+      </SheetContent>
+    </Sheet>
+  )
+}

diff --git a/src/app/_components/Navbar.tsx b/src/app/_components/Navbar.tsx
new file mode 100644
index 0000000..07d18a9
--- /dev/null
+++ b/src/app/_components/Navbar.tsx
@@ -0,0 +1,71 @@
+'use client'
+import {
+  NavigationMenu,
+  NavigationMenuItem,
+  NavigationMenuList,
+} from '@/lib/ui/NavigationMenu'
+
+import { LogoIcon } from './Icons'
+import { buttonVariants } from '@/lib/ui/Button'
+import { MobileMenu } from '@/app/_components/MobileMenu'
+
+interface RouteProps {
+  href: string
+  label: string
+}
+
+const routeList: RouteProps[] = [
+  {
+    href: '#features',
+    label: 'Features',
+  },
+  {
+    href: '#testimonials',
+    label: 'Testimonials',
+  },
+  {
+    href: '#pricing',
+    label: 'Pricing',
+  },
+  {
+    href: '#faq',
+    label: 'FAQ',
+  },
+]
+
+export const Navbar = () => {
+  return (
+    <header className="sticky border-b-[1px] top-0 z-40 w-full bg-white dark:border-b-slate-700 dark:bg-background">
+      <NavigationMenu className="mx-auto">
+        <NavigationMenuList className="container h-14 px-4 w-screen flex justify-between ">
+          <NavigationMenuItem className="font-bold flex">
+            <a href="/" className="ml-2 font-bold text-xl flex">
+              <LogoIcon />
+              Void
+            </a>
+          </NavigationMenuItem>
+
+          {/* mobile */}
+          <div className="flex md:hidden">
+            <MobileMenu />
+          </div>
+
+          {/* desktop */}
+          <nav className="hidden md:flex gap-2">
+            {routeList.map((route: RouteProps, i) => (
+              <a
+                href={route.href}
+                key={i}
+                className={`text-[17px] ${buttonVariants({
+                  variant: 'ghost',
+                })}`}
+              >
+                {route.label}
+              </a>
+            ))}
+          </nav>
+        </NavigationMenuList>
+      </NavigationMenu>
+    </header>
+  )
+}

diff --git a/src/app/_components/Newsletter.tsx b/src/app/_components/Newsletter.tsx
new file mode 100644
index 0000000..faf01f6
--- /dev/null
+++ b/src/app/_components/Newsletter.tsx
@@ -0,0 +1,41 @@
+import { Button } from "./ui/button";
+import { Input } from "./ui/input";
+
+export const Newsletter = () => {
+  const handleSubmit = (e: any) => {
+    e.preventDefault();
+    console.log("Subscribed!");
+  };
+
+  return (
+    <section id="newsletter">
+      <hr className="w-11/12 mx-auto" />
+
+      <div className="container py-24 sm:py-32">
+        <h3 className="text-center text-4xl md:text-5xl font-bold">
+          Join Our Daily{" "}
+          <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+            Newsletter
+          </span>
+        </h3>
+        <p className="text-xl text-muted-foreground text-center mt-4 mb-8">
+          Lorem ipsum dolor sit amet consectetur.
+        </p>
+
+        <form
+          className="flex flex-col w-full md:flex-row md:w-6/12 lg:w-4/12 mx-auto gap-4 md:gap-2"
+          onSubmit={handleSubmit}
+        >
+          <Input
+            placeholder="leomirandadev@gmail.com"
+            className="bg-muted/50 dark:bg-muted/80 "
+            aria-label="email"
+          />
+          <Button>Subscribe</Button>
+        </form>
+      </div>
+
+      <hr className="w-11/12 mx-auto" />
+    </section>
+  );
+};

diff --git a/src/app/_components/Pricing.tsx b/src/app/_components/Pricing.tsx
new file mode 100644
index 0000000..5719bd6
--- /dev/null
+++ b/src/app/_components/Pricing.tsx
@@ -0,0 +1,147 @@
+import { Badge } from "@/components/ui/badge";
+import { Button } from "@/components/ui/button";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+import { Check } from "lucide-react";
+
+enum PopularPlanType {
+  NO = 0,
+  YES = 1,
+}
+
+interface PricingProps {
+  title: string;
+  popular: PopularPlanType;
+  price: number;
+  description: string;
+  buttonText: string;
+  benefitList: string[];
+}
+
+const pricingList: PricingProps[] = [
+  {
+    title: "Free",
+    popular: 0,
+    price: 0,
+    description:
+      "Lorem ipsum dolor sit, amet ipsum consectetur adipisicing elit.",
+    buttonText: "Get Started",
+    benefitList: [
+      "1 Team member",
+      "2 GB Storage",
+      "Upto 4 pages",
+      "Community support",
+      "lorem ipsum dolor",
+    ],
+  },
+  {
+    title: "Premium",
+    popular: 1,
+    price: 5,
+    description:
+      "Lorem ipsum dolor sit, amet ipsum consectetur adipisicing elit.",
+    buttonText: "Start Free Trial",
+    benefitList: [
+      "4 Team member",
+      "4 GB Storage",
+      "Upto 6 pages",
+      "Priority support",
+      "lorem ipsum dolor",
+    ],
+  },
+  {
+    title: "Enterprise",
+    popular: 0,
+    price: 40,
+    description:
+      "Lorem ipsum dolor sit, amet ipsum consectetur adipisicing elit.",
+    buttonText: "Contact US",
+    benefitList: [
+      "10 Team member",
+      "8 GB Storage",
+      "Upto 10 pages",
+      "Priority support",
+      "lorem ipsum dolor",
+    ],
+  },
+];
+
+export const Pricing = () => {
+  return (
+    <section
+      id="pricing"
+      className="container py-24 sm:py-32"
+    >
+      <h2 className="text-3xl md:text-4xl font-bold text-center">
+        Get
+        <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+          {" "}
+          Unlimited{" "}
+        </span>
+        Access
+      </h2>
+      <h3 className="text-xl text-center text-muted-foreground pt-4 pb-8">
+        Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias
+        reiciendis.
+      </h3>
+      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
+        {pricingList.map((pricing: PricingProps) => (
+          <Card
+            key={pricing.title}
+            className={
+              pricing.popular === PopularPlanType.YES
+                ? "drop-shadow-xl shadow-black/10 dark:shadow-white/10"
+                : ""
+            }
+          >
+            <CardHeader>
+              <CardTitle className="flex item-center justify-between">
+                {pricing.title}
+                {pricing.popular === PopularPlanType.YES ? (
+                  <Badge
+                    variant="secondary"
+                    className="text-sm text-primary"
+                  >
+                    Most popular
+                  </Badge>
+                ) : null}
+              </CardTitle>
+              <div>
+                <span className="text-3xl font-bold">${pricing.price}</span>
+                <span className="text-muted-foreground"> /month</span>
+              </div>
+
+              <CardDescription>{pricing.description}</CardDescription>
+            </CardHeader>
+
+            <CardContent>
+              <Button className="w-full">{pricing.buttonText}</Button>
+            </CardContent>
+
+            <hr className="w-4/5 m-auto mb-4" />
+
+            <CardFooter className="flex">
+              <div className="space-y-4">
+                {pricing.benefitList.map((benefit: string) => (
+                  <span
+                    key={benefit}
+                    className="flex"
+                  >
+                    <Check className="text-green-500" />{" "}
+               
diff --git a/src/app/_components/ScrollToTop.tsx b/src/app/_components/ScrollToTop.tsx
new file mode 100644
index 0000000..8a21c75
--- /dev/null
+++ b/src/app/_components/ScrollToTop.tsx
@@ -0,0 +1,38 @@
+import { useState, useEffect } from "react";
+import { Button } from "./ui/button";
+import { ArrowUpToLine } from "lucide-react";
+
+export const ScrollToTop = () => {
+  const [showTopBtn, setShowTopBtn] = useState(false);
+
+  useEffect(() => {
+    window.addEventListener("scroll", () => {
+      if (window.scrollY > 400) {
+        setShowTopBtn(true);
+      } else {
+        setShowTopBtn(false);
+      }
+    });
+  }, []);
+
+  const goToTop = () => {
+    window.scroll({
+      top: 0,
+      left: 0,
+    });
+  };
+
+  return (
+    <>
+      {showTopBtn && (
+        <Button
+          onClick={goToTop}
+          className="fixed bottom-4 right-4 opacity-90 shadow-md"
+          size="icon"
+        >
+          <ArrowUpToLine className="h-4 w-4" />
+        </Button>
+      )}
+    </>
+  );
+};

diff --git a/src/app/_components/Services.tsx b/src/app/_components/Services.tsx
new file mode 100644
index 0000000..493c4b3
--- /dev/null
+++ b/src/app/_components/Services.tsx
@@ -0,0 +1,76 @@
+import { Card, CardDescription, CardHeader, CardTitle } from "./ui/card";
+import { MagnifierIcon, WalletIcon, ChartIcon } from "./Icons";
+import cubeLeg from "../assets/cube-leg.png";
+
+interface ServiceProps {
+  title: string;
+  description: string;
+  icon: JSX.Element;
+}
+
+const serviceList: ServiceProps[] = [
+  {
+    title: "Code Collaboration",
+    description:
+      "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi nesciunt est nostrum omnis ab sapiente.",
+    icon: <ChartIcon />,
+  },
+  {
+    title: "Project Management",
+    description:
+      "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi nesciunt est nostrum omnis ab sapiente.",
+    icon: <WalletIcon />,
+  },
+  {
+    title: "Task Automation",
+    description:
+      "Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi nesciunt est nostrum omnis ab sapiente.",
+    icon: <MagnifierIcon />,
+  },
+];
+
+export const Services = () => {
+  return (
+    <section className="container py-24 sm:py-32">
+      <div className="grid lg:grid-cols-[1fr,1fr] gap-8 place-items-center">
+        <div>
+          <h2 className="text-3xl md:text-4xl font-bold">
+            <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+              Client-Centric{" "}
+            </span>
+            Services
+          </h2>
+
+          <p className="text-muted-foreground text-xl mt-4 mb-8 ">
+            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Veritatis
+            dolor.
+          </p>
+
+          <div className="flex flex-col gap-8">
+            {serviceList.map(({ icon, title, description }: ServiceProps) => (
+              <Card key={title}>
+                <CardHeader className="space-y-1 flex md:flex-row justify-start items-start gap-4">
+                  <div className="mt-1 bg-primary/20 p-1 rounded-2xl">
+                    {icon}
+                  </div>
+                  <div>
+                    <CardTitle>{title}</CardTitle>
+                    <CardDescription className="text-md mt-2">
+                      {description}
+                    </CardDescription>
+                  </div>
+                </CardHeader>
+              </Card>
+            ))}
+          </div>
+        </div>
+
+        <img
+          src={cubeLeg}
+          className="w-[300px] md:w-[500px] lg:w-[600px] object-contain"
+          alt="About services"
+        />
+      </div>
+    </section>
+  );
+};

diff --git a/src/app/_components/Statistics.tsx b/src/app/_components/Statistics.tsx
new file mode 100644
index 0000000..a8b252d
--- /dev/null
+++ b/src/app/_components/Statistics.tsx
@@ -0,0 +1,41 @@
+export const Statistics = () => {
+  interface statsProps {
+    quantity: string;
+    description: string;
+  }
+
+  const stats: statsProps[] = [
+    {
+      quantity: "2.7K+",
+      description: "Users",
+    },
+    {
+      quantity: "1.8K+",
+      description: "Subscribers",
+    },
+    {
+      quantity: "112",
+      description: "Downloads",
+    },
+    {
+      quantity: "4",
+      description: "Products",
+    },
+  ];
+
+  return (
+    <section id="statistics">
+      <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
+        {stats.map(({ quantity, description }: statsProps) => (
+          <div
+            key={description}
+            className="space-y-2 text-center"
+          >
+            <h2 className="text-3xl sm:text-4xl font-bold ">{quantity}</h2>
+            <p className="text-xl text-muted-foreground">{description}</p>
+          </div>
+        ))}
+      </div>
+    </section>
+  );
+};

diff --git a/src/app/_components/Team.tsx b/src/app/_components/Team.tsx
new file mode 100644
index 0000000..fae139a
--- /dev/null
+++ b/src/app/_components/Team.tsx
@@ -0,0 +1,161 @@
+import { buttonVariants } from "@/components/ui/button";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+import { Facebook, Instagram, Linkedin } from "lucide-react";
+
+interface TeamProps {
+  imageUrl: string;
+  name: string;
+  position: string;
+  socialNetworks: SociaNetworkslProps[];
+}
+
+interface SociaNetworkslProps {
+  name: string;
+  url: string;
+}
+
+const teamList: TeamProps[] = [
+  {
+    imageUrl: "https://i.pravatar.cc/150?img=35",
+    name: "Emma Smith",
+    position: "Product Manager",
+    socialNetworks: [
+      { name: "Linkedin", url: "http://linkedin.com" },
+      {
+        name: "Facebook",
+        url: "https://www.facebook.com/",
+      },
+      {
+        name: "Instagram",
+        url: "https://www.instagram.com/",
+      },
+    ],
+  },
+  {
+    imageUrl: "https://i.pravatar.cc/150?img=60",
+    name: "John Doe",
+    position: "Tech Lead",
+    socialNetworks: [
+      { name: "Linkedin", url: "http://linkedin.com" },
+      {
+        name: "Facebook",
+        url: "https://www.facebook.com/",
+      },
+      {
+        name: "Instagram",
+        url: "https://www.instagram.com/",
+      },
+    ],
+  },
+  {
+    imageUrl: "https://i.pravatar.cc/150?img=36",
+    name: "Ashley Ross",
+    position: "Frontend Developer",
+    socialNetworks: [
+      { name: "Linkedin", url: "http://linkedin.com" },
+
+      {
+        name: "Instagram",
+        url: "https://www.instagram.com/",
+      },
+    ],
+  },
+  {
+    imageUrl: "https://i.pravatar.cc/150?img=17",
+    name: "Bruce Rogers",
+    position: "Backend Developer",
+    socialNetworks: [
+      { name: "Linkedin", url: "http://linkedin.com" },
+      {
+        name: "Facebook",
+        url: "https://www.facebook.com/",
+      },
+    ],
+  },
+];
+
+export const Team = () => {
+  const socialIcon = (iconName: string) => {
+    switch (iconName) {
+      case "Linkedin":
+        return <Linkedin size="20" />;
+
+      case "Facebook":
+        return <Facebook size="20" />;
+
+      case "Instagram":
+        return <Instagram size="20" />;
+    }
+  };
+
+  return (
+    <section
+      id="team"
+      className="container py-24 sm:py-32"
+    >
+      <h2 className="text-3xl md:text-4xl font-bold">
+        <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+          Our Dedicated{" "}
+        </span>
+        Crew
+      </h2>
+
+      <p className="mt-4 mb-10 text-xl text-muted-foreground">
+        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Veritatis
+        dolor pariatur sit!
+      </p>
+
+      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 gap-y-10">
+        {teamList.map(
+          ({ imageUrl, name, position, socialNetworks }: TeamProps) => (
+            <Card
+              key={name}
+              className="bg-muted/50 relative mt-8 flex flex-col justify-center items-center"
+            >
+              <CardHeader className="mt-8 flex justify-center items-center pb-2">
+                <img
+                  src={imageUrl}
+                  alt={`${name} ${position}`}
+                  className="absolute -top-12 rounded-full w-24 h-24 aspect-square object-cover"
+                />
+                <CardTitle className="text-center">{name}</CardTitle>
+                <CardDescription className="text-primary">
+                  {position}
+                </CardDescription>
+              </CardHeader>
+
+              <CardContent className="text-center pb-2">
+                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
+              </CardContent>
+
+              <CardFooter>
+                {socialNetworks.map(({ name, url }: SociaNet
diff --git a/src/app/_components/Testimonials.tsx b/src/app/_components/Testimonials.tsx
new file mode 100644
index 0000000..0719abb
--- /dev/null
+++ b/src/app/_components/Testimonials.tsx
@@ -0,0 +1,111 @@
+import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+
+interface TestimonialProps {
+  image: string;
+  name: string;
+  userName: string;
+  comment: string;
+}
+
+const testimonials: TestimonialProps[] = [
+  {
+    image: "https://github.com/shadcn.png",
+    name: "John Doe React",
+    userName: "@john_Doe",
+    comment: "This landing page is awesome!",
+  },
+  {
+    image: "https://github.com/shadcn.png",
+    name: "John Doe React",
+    userName: "@john_Doe1",
+    comment:
+      "Lorem ipsum dolor sit amet,empor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud.",
+  },
+
+  {
+    image: "https://github.com/shadcn.png",
+    name: "John Doe React",
+    userName: "@john_Doe2",
+    comment:
+      "Lorem ipsum dolor sit amet,exercitation. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident.",
+  },
+  {
+    image: "https://github.com/shadcn.png",
+    name: "John Doe React",
+    userName: "@john_Doe3",
+    comment:
+      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.",
+  },
+  {
+    image: "https://github.com/shadcn.png",
+    name: "John Doe React",
+    userName: "@john_Doe4",
+    comment:
+      "Lorem ipsum dolor sit amet, tempor incididunt  aliqua. Ut enim ad minim veniam, quis nostrud.",
+  },
+  {
+    image: "https://github.com/shadcn.png",
+    name: "John Doe React",
+    userName: "@john_Doe5",
+    comment:
+      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
+  },
+];
+
+export const Testimonials = () => {
+  return (
+    <section
+      id="testimonials"
+      className="container py-24 sm:py-32"
+    >
+      <h2 className="text-3xl md:text-4xl font-bold">
+        Discover Why
+        <span className="bg-gradient-to-b from-primary/60 to-primary text-transparent bg-clip-text">
+          {" "}
+          People Love{" "}
+        </span>
+        This Landing Page
+      </h2>
+
+      <p className="text-xl text-muted-foreground pt-4 pb-8">
+        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non unde error
+        facere hic reiciendis illo
+      </p>
+
+      <div className="grid md:grid-cols-2 lg:grid-cols-4 sm:block columns-2  lg:columns-3 lg:gap-6 mx-auto space-y-4 lg:space-y-6">
+        {testimonials.map(
+          ({ image, name, userName, comment }: TestimonialProps) => (
+            <Card
+              key={userName}
+              className="max-w-md md:break-inside-avoid overflow-hidden"
+            >
+              <CardHeader className="flex flex-row items-center gap-4 pb-2">
+                <Avatar>
+                  <AvatarImage
+                    alt=""
+                    src={image}
+                  />
+                  <AvatarFallback>OM</AvatarFallback>
+                </Avatar>
+
+                <div className="flex flex-col">
+                  <CardTitle className="text-lg">{name}</CardTitle>
+                  <CardDescription>{userName}</CardDescription>
+                </div>
+              </CardHeader>
+
+              <CardContent>{comment}</CardContent>
+            </Card>
+          )
+        )}
+      </div>
+    </section>
+  );
+};

diff --git a/src/app/_components/mode-toggle.tsx b/src/app/_components/mode-toggle.tsx
new file mode 100644
index 0000000..ce57119
--- /dev/null
+++ b/src/app/_components/mode-toggle.tsx
@@ -0,0 +1,40 @@
+import { Button } from "@/components/ui/button";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuTrigger,
+} from "@/components/ui/dropdown-menu";
+import { useTheme } from "@/components/theme-provider";
+import { Moon, Sun } from "lucide-react";
+
+export function ModeToggle() {
+  const { setTheme } = useTheme();
+
+  return (
+    <DropdownMenu>
+      <DropdownMenuTrigger asChild>
+        <Button
+          variant="ghost"
+          size="icon"
+          className="ghost"
+        >
+          <Sun className="h-[1.1rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
+          <Moon className="absolute h-[1.1rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
+          <span className="sr-only">Toggle theme</span>
+        </Button>
+      </DropdownMenuTrigger>
+      <DropdownMenuContent align="end">
+        <DropdownMenuItem onClick={() => setTheme("light")}>
+          Light
+        </DropdownMenuItem>
+        <DropdownMenuItem onClick={() => setTheme("dark")}>
+          Dark
+        </DropdownMenuItem>
+        <DropdownMenuItem onClick={() => setTheme("system")}>
+          System
+        </DropdownMenuItem>
+      </DropdownMenuContent>
+    </DropdownMenu>
+  );
+}

diff --git a/src/app/_components/theme-provider.tsx b/src/app/_components/theme-provider.tsx
new file mode 100644
index 0000000..85163c1
--- /dev/null
+++ b/src/app/_components/theme-provider.tsx
@@ -0,0 +1,76 @@
+import { createContext, useContext, useEffect, useState } from "react";
+
+type Theme = "dark" | "light" | "system";
+
+type ThemeProviderProps = {
+  children: React.ReactNode;
+  defaultTheme?: Theme;
+  storageKey?: string;
+};
+
+type ThemeProviderState = {
+  theme: Theme;
+  setTheme: (theme: Theme) => void;
+};
+
+const initialState: ThemeProviderState = {
+  theme: "system",
+  setTheme: () => null,
+};
+
+const ThemeProviderContext = createContext<ThemeProviderState>(initialState);
+
+export function ThemeProvider({
+  children,
+  defaultTheme = "dark",
+  storageKey = "vite-ui-theme",
+  ...props
+}: ThemeProviderProps) {
+  const [theme, setTheme] = useState<Theme>(
+    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
+  );
+
+  useEffect(() => {
+    const root = window.document.documentElement;
+
+    root.classList.remove("light", "dark");
+
+    if (theme === "system") {
+      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
+        .matches
+        ? "dark"
+        : "light";
+
+      root.classList.add(systemTheme);
+      return;
+    }
+
+    root.classList.add(theme);
+  }, [theme]);
+
+  const value = {
+    theme,
+    setTheme: (theme: Theme) => {
+      localStorage.setItem(storageKey, theme);
+      setTheme(theme);
+    },
+  };
+
+  return (
+    <ThemeProviderContext.Provider
+      {...props}
+      value={value}
+    >
+      {children}
+    </ThemeProviderContext.Provider>
+  );
+}
+
+export const useTheme = () => {
+  const context = useContext(ThemeProviderContext);
+
+  if (context === undefined)
+    throw new Error("useTheme must be used within a ThemeProvider");
+
+  return context;
+};

diff --git a/src/app/api/slack/event/route.ts b/src/app/api/slack/event/route.ts
new file mode 100644
index 0000000..ad063cc
--- /dev/null
+++ b/src/app/api/slack/event/route.ts
@@ -0,0 +1,40 @@
+import { NextRequest, NextResponse } from 'next/server'
+import { verifySlackRequest } from '@/lib/api/slack/verify-slack-request'
+import { SlackEvent } from '@slack/bolt'
+
+export const POST = async (request: NextRequest) => {
+  const payload = await request.clone().json()
+
+  // Handle Slack ownership verification
+  // Reference: https://api.slack.com/apis/connections/events-api#handshake
+  if (payload.challenge) {
+    return NextResponse.json({
+      challenge: payload.challenge,
+    })
+  }
+
+  const isValidRequest = verifySlackRequest({
+    signature: request.headers.get('x-slack-signature')!,
+    body: await request.clone().text(),
+    timestamp: Number(request.headers.get('x-slack-request-timestamp')),
+  })
+
+  if (!isValidRequest) {
+    return {
+      statusCode: 400,
+      body: 'Invalid request',
+    }
+  }
+
+  await handleEvent(payload.event)
+
+  return NextResponse.json({})
+}
+
+async function handleEvent(event: SlackEvent) {
+  switch (event.type) {
+    case 'app_mention':
+    default:
+      return
+  }
+}

diff --git a/src/app/api/slack/interaction/route.ts b/src/app/api/slack/interaction/route.ts
new file mode 100644
index 0000000..347a4ba
--- /dev/null
+++ b/src/app/api/slack/interaction/route.ts
@@ -0,0 +1,65 @@
+import { NextRequest, NextResponse } from 'next/server'
+import { verifySlackRequest } from '@/lib/api/slack/verify-slack-request'
+import { SlackShortcut, ViewSubmitAction } from '@slack/bolt'
+import { defaultQueue } from '@/queue/default-queue'
+import { CreateGithubIssueSelectedRepoMetadata } from '@/queue/handlers/handle-ask-slack-select-github-repo-for-issue'
+
+export const POST = async (request: NextRequest) => {
+  const isValidRequest = verifySlackRequest({
+    signature: request.headers.get('x-slack-signature')!,
+    body: await request.clone().text(),
+    timestamp: Number(request.headers.get('x-slack-request-timestamp')),
+  })
+
+  if (!isValidRequest) {
+    return NextResponse.json({ error: 'invalid_request' }, { status: 400 })
+  }
+
+  const formData = await request.formData()
+  const payload = formData.get('payload')
+  if (!payload || payload instanceof File) {
+    return NextResponse.json({})
+  }
+
+  const shortcut: SlackShortcut | ViewSubmitAction = JSON.parse(payload)
+
+  if (!shortcut.team) {
+    return NextResponse.json({})
+  }
+
+  if (
+    shortcut.type === 'view_submission' &&
+    shortcut.view.callback_id === 'gh_issue_create:selected_repo'
+  ) {
+    const data: CreateGithubIssueSelectedRepoMetadata = JSON.parse(
+      shortcut.view.private_metadata,
+    )
+
+    const gh_repo_full_name =
+      shortcut.view.state.values['select_repo_block']['github_repo']
+        .selected_option?.value ?? null
+
+    await defaultQueue.add('create_github_issue_from_slack', {
+      team_id: data.team_id,
+      target_message_ts: data.target_message_ts,
+      channel_id: data.channel_id,
+      response_url: data.response_url,
+      gh_repo_full_name,
+    })
+  }
+
+  if (
+    shortcut.type === 'message_action' &&
+    shortcut.callback_id === 'gh_issue_create:start'
+  ) {
+    await defaultQueue.add('ask_slack_select_github_repo_for_issue', {
+      team_id: shortcut.team.id,
+      trigger_id: shortcut.trigger_id,
+      channel_id: shortcut.channel.id,
+      target_message_ts: shortcut.message.ts,
+      response_url: shortcut.response_url,
+    })
+  }
+
+  return NextResponse.json({})
+}

diff --git a/src/app/github/setup/page.tsx b/src/app/github/setup/page.tsx
index cf87945..c624467 100644
--- a/src/app/github/setup/page.tsx
+++ b/src/app/github/setup/page.tsx
@@ -9,10 +9,13 @@ export default async function GithubSetup(
     {
       installation_id: string
       setup_action: 'install'
+      state: string
     }
   >,
 ) {
-  const { searchParams } = props
+  const {
+    searchParams: { installation_id, state: organization_id },
+  } = props
 
   const { userId } = auth()
 
@@ -20,16 +23,27 @@ export default async function GithubSetup(
     redirect('/')
   }
 
-  const installId = parseInt(searchParams.installation_id)
+  const installId = parseInt(installation_id)
+
+  const organization = await dbClient
+    .selectFrom('voidpm.organization')
+    .where('voidpm.organization.id', '=', parseInt(organization_id))
+    .where('ext_clerk_user_id', '=', userId)
+    .select('id')
+    .executeTakeFirst()
+
+  if (!organization) {
+    return redirect('/')
+  }
 
   dbClient
-    .insertInto('voidpm.organization')
+    .insertInto('github.organization')
     .values({
       ext_gh_install_id: installId,
-      ext_clerk_user_id: userId,
+      organization_id: organization.id,
     })
     .onConflict((oc) =>
-      oc.column('ext_clerk_user_id').doUpdateSet({
+      oc.column('organization_id').doUpdateSet({
         ext_gh_install_id: installId,
       }),
     )

diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index 527e296..4e836f9 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -1,6 +1,6 @@
 import type { Metadata } from 'next'
 import { Inter } from 'next/font/google'
-import { ClerkProvider } from '@clerk/nextjs'
+import { ClerkProvider, RedirectToSignIn, SignedOut } from '@clerk/nextjs'
 import './globals.css'
 import { cn } from '@/lib/utils'
 import { TooltipProvider } from '@/lib/ui/Tooltip'

diff --git a/src/app/page.tsx b/src/app/page.tsx
index ea43f23..21d5956 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -1,113 +1,23 @@
-import Image from 'next/image'
+import { About } from '@/app/_components/About'
+import { Hero } from '@/app/_components/Hero'
+import { HowItWorks } from '@/app/_components/HowItWorks'
+import { Navbar } from '@/app/_components/Navbar'
+import { auth } from '@clerk/nextjs'
+import { redirect } from 'next/navigation'
 
-export default function Home() {
-  return (
-    <div className="flex min-h-screen flex-col items-center justify-between p-24">
-      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
-        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
-          Get started by editing&nbsp;
-          <code className="font-mono font-bold">src/app/page.tsx</code>
-        </p>
-        <div className="fixed bottom-0 left-0 flex h-48 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:h-auto lg:w-auto lg:bg-none">
-          <a
-            className="pointer-events-none flex place-items-center gap-2 p-8 lg:pointer-events-auto lg:p-0"
-            href="https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
-            target="_blank"
-            rel="noopener noreferrer"
-          >
-            By{' '}
-            <Image
-              src="/vercel.svg"
-              alt="Vercel Logo"
-              className="dark:invert"
-              width={100}
-              height={24}
-              priority
-            />
-          </a>
-        </div>
-      </div>
-
-      <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-full sm:before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full sm:after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px] z-[-1]">
-        <Image
-          className="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert"
-          src="/next.svg"
-          alt="Next.js Logo"
-          width={180}
-          height={37}
-          priority
-        />
-      </div>
-
-      <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
-        <a
-          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
-          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
-          target="_blank"
-          rel="noopener noreferrer"
-        >
-          <h2 className={`mb-3 text-2xl font-semibold`}>
-            Docs{' '}
-            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
-              -&gt;
-            </span>
-          </h2>
-          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
-            Find in-depth information about Next.js features and API.
-          </p>
-        </a>
+export default async function Home() {
+  const { userId } = auth()
 
-        <a
-          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=
diff --git a/src/app/slack/setup/page.tsx b/src/app/slack/setup/page.tsx
new file mode 100644
index 0000000..42c24ba
--- /dev/null
+++ b/src/app/slack/setup/page.tsx
@@ -0,0 +1,59 @@
+import { dbClient } from '@/lib/db/client'
+import { PageProps } from '@/lib/next-js/page-props'
+import { GetAccessToken } from '@/lib/slack/get-access-token'
+import { auth } from '@clerk/nextjs'
+import { redirect } from 'next/navigation'
+
+export default async function SlackSetup(
+  props: PageProps<
+    {},
+    {
+      code: string
+      state: string
+    }
+  >,
+) {
+  const { searchParams } = props
+
+  const { code, state: organization_id } = searchParams
+
+  const { userId } = auth()
+
+  if (!userId) {
+    redirect('/')
+  }
+
+  const data = await GetAccessToken({ code })
+
+  const organization = await dbClient
+    .selectFrom('voidpm.organization')
+    .where('voidpm.organization.id', '=', parseInt(organization_id))
+    .where('ext_clerk_user_id', '=', userId)
+    .select('id')
+    .executeTakeFirst()
+
+  if (!organization) {
+    return redirect('/')
+  }
+
+  dbClient
+    .insertInto('slack.workspace')
+    .values({
+      ext_slack_webhook_channel_id: data.incoming_webhook.channel_id,
+      ext_slack_team_id: data.team.id,
+      webhook_url: data.incoming_webhook.url,
+      organization_id: organization.id,
+      slack_access_token: data.access_token,
+    })
+    .onConflict((oc) =>
+      oc.column('organization_id').doUpdateSet({
+        ext_slack_webhook_channel_id: data.incoming_webhook.channel_id,
+        ext_slack_team_id: data.team.id,
+        webhook_url: data.incoming_webhook.url,
+        slack_access_token: data.access_token,
+      }),
+    )
+    .executeTakeFirstOrThrow()
+
+  return redirect('/review')
+}

diff --git a/src/lib/ai/summarize-github-issue.ts b/src/lib/ai/summarize-github-issue.ts
new file mode 100644
index 0000000..e020baf
--- /dev/null
+++ b/src/lib/ai/summarize-github-issue.ts
@@ -0,0 +1,56 @@
+import { PromptTemplate } from '@langchain/core/prompts'
+import { OpenAI } from '@langchain/openai'
+
+interface SummarizeGithubIssueParams {
+  messages: Array<{ text: string }>
+}
+
+export async function summarizeGithubIssue(params: SummarizeGithubIssueParams) {
+  const { messages } = params
+  const promptTemplate = new PromptTemplate({
+    template: prompt,
+    inputVariables: ['context'],
+  })
+
+  const input = await promptTemplate.format({
+    context: JSON.stringify(messages),
+  })
+
+  const model = new OpenAI({ temperature: 0, modelName: 'gpt-3.5-turbo' })
+  const output = await model.invoke(input)
+
+  const regex = /.*Task.*\n(.*)\n*([\s\S]+)/
+  const matches = regex.exec(output)
+  if (!matches) {
+    return null
+  }
+
+  if (matches.length < 3) {
+    return null
+  }
+
+  const issue = matches[1].replace('- ', '')
+  const description = matches[2]
+
+  return {
+    issue,
+    description,
+  }
+}
+
+const prompt = `Identify, and summarize a single Task that needs to be done from the context below. You should follow ALL of the following rules when generating an answer:
+- There will be a CONTEXT.
+- The context is a set of JSON objects, each object includes a "text" property that is chat message that was sent.
+- The chat messages are in order with latest messages first.
+- Stop looking for other tasks once you have identified one.
+- Ignore any chat messages that are not relevant to the identified task.
+- Each Task should describe the issue, and the requirement.
+- Do not make up any information if the CONTEXT does not have relevant information.
+- Use bullet points, lists, paragraphs and text styling to present the summary in markdown.
+- The answer should only be based on the CONTEXT. Do not use any external sources. Do not generate the response based on the question without clear reference to the context.
+- Summarize the CONTEXT to make it easier to read, but don't omit any information.
+- The summary should contain the following headings: Task, Requirements.
+- Each point should be less than 10 words.
+
+CONTEXT: {context}
+`

diff --git a/src/lib/api/slack/client.ts b/src/lib/api/slack/client.ts
new file mode 100644
index 0000000..c994716
--- /dev/null
+++ b/src/lib/api/slack/client.ts
@@ -0,0 +1,51 @@
+import { http } from '@/lib/http/client/http'
+
+const slackApi = (path: string) => `https://slack.com/api/${path}`
+
+export type SlackClient = ReturnType<typeof createSlackClient>
+
+export const createSlackClient = (accessToken: string) => ({
+  get: async <TData>(url: string, options?: RequestInit): Promise<TData> =>
+    http.get<TData>(slackApi(url), createConfig(accessToken, options)),
+  post: async <TData>(
+    url: string,
+    data: Record<string, any> | FormData,
+    options?: RequestInit,
+  ) =>
+    http.post<TData>(slackApi(url), data, createConfig(accessToken, options)),
+  put: async <TData>(
+    url: string,
+    data: Record<string, any> | FormData,
+    options?: RequestInit,
+  ) =>
+    http.put<TData>(
+      slackApi(url),
+      data,
+      createConfig(accessToken, { ...options, method: 'PUT' }),
+    ),
+  patch: async <TData>(
+    url: string,
+    data: Record<string, any> | FormData,
+    options?: RequestInit,
+  ) =>
+    http.patch<TData>(
+      slackApi(url),
+      data,
+      createConfig(accessToken, { ...options, method: 'PATCH' }),
+    ),
+  delete: async <TData>(url: string, options?: RequestInit): Promise<TData> =>
+    http.delete<TData>(slackApi(url), createConfig(accessToken, options)),
+})
+
+function createConfig(
+  accessToken: string,
+  options: RequestInit = {},
+): RequestInit {
+  const headers = options.headers ? new Headers(options.headers) : new Headers()
+
+  headers.append('Authorization', `Bearer ${accessToken}`)
+
+  options.headers = headers
+
+  return options
+}

diff --git a/src/lib/api/slack/verify-slack-request.ts b/src/lib/api/slack/verify-slack-request.ts
new file mode 100644
index 0000000..e98c833
--- /dev/null
+++ b/src/lib/api/slack/verify-slack-request.ts
@@ -0,0 +1,26 @@
+import { createHmac } from 'node:crypto'
+
+interface VerifySlackRequestParams {
+  signature: string
+  timestamp: number
+  body: string
+}
+
+export function verifySlackRequest(params: VerifySlackRequestParams) {
+  const { signature, timestamp, body } = params
+  const secret = process.env.SLACK_SIGNING_SECRET!
+  const now = Math.floor(Date.now() / 1000) // match Slack timestamp precision
+
+  // if the timestamp is more than five minutes off assume something’s funky
+  if (Math.abs(now - timestamp) > 300) {
+    return false
+  }
+
+  // make a hash of the request using the same approach Slack used
+  const hash = createHmac('sha256', secret)
+    .update(`v0:${timestamp}:${body}`)
+    .digest('hex')
+
+  // we know the request is valid if our hash matches Slack’s
+  return `v0=${hash}` === signature
+}

diff --git a/src/lib/db/migrations/1710681831119_create-void-schema.ts b/src/lib/db/migrations/1710681831119_create-voidpm-schema.ts
similarity index 100%
rename from src/lib/db/migrations/1710681831119_create-void-schema.ts
rename to src/lib/db/migrations/1710681831119_create-voidpm-schema.ts

diff --git a/src/lib/db/migrations/1710707497550_create-void-organization.ts b/src/lib/db/migrations/1710707497550_create-void-organization.ts
index f30d28f..09f1f5b 100644
--- a/src/lib/db/migrations/1710707497550_create-void-organization.ts
+++ b/src/lib/db/migrations/1710707497550_create-void-organization.ts
@@ -10,7 +10,6 @@ export async function up(pgm: MigrationBuilder): Promise<void> {
       id: 'id',
       created_at: 'timestamp',
       updated_at: 'timestamp',
-      ext_gh_install_id: { type: 'integer', notNull: true, unique: true },
       ext_clerk_user_id: { type: 'text', unique: true, notNull: true },
     },
   )

diff --git a/src/lib/db/migrations/1710710023578_create-github-schema.ts b/src/lib/db/migrations/1710710023576_create-github-schema.ts
similarity index 100%
rename from src/lib/db/migrations/1710710023578_create-github-schema.ts
rename to src/lib/db/migrations/1710710023576_create-github-schema.ts

diff --git a/src/lib/db/migrations/1710710023577_create-github-organization.ts b/src/lib/db/migrations/1710710023577_create-github-organization.ts
new file mode 100644
index 0000000..d118d40
--- /dev/null
+++ b/src/lib/db/migrations/1710710023577_create-github-organization.ts
@@ -0,0 +1,32 @@
+/* eslint-disable @typescript-eslint/naming-convention */
+import { MigrationBuilder, ColumnDefinitions } from 'node-pg-migrate'
+
+export const shorthands: ColumnDefinitions | undefined = undefined
+
+export async function up(pgm: MigrationBuilder): Promise<void> {
+  return pgm.createTable(
+    {
+      schema: 'github',
+      name: 'organization',
+    },
+    {
+      id: 'id',
+      created_at: 'timestamp',
+      updated_at: 'timestamp',
+      ext_gh_install_id: { type: 'integer', notNull: true, unique: true },
+      organization_id: {
+        type: 'integer',
+        notNull: true,
+        unique: true,
+        references: {
+          schema: 'voidpm',
+          name: 'organization',
+        },
+      },
+    },
+  )
+}
+
+export async function down(pgm: MigrationBuilder): Promise<void> {
+  pgm.dropTable('github.organization')
+}

diff --git a/src/lib/db/migrations/1711449100128_create-slack-schema.ts b/src/lib/db/migrations/1711449100128_create-slack-schema.ts
new file mode 100644
index 0000000..4974dce
--- /dev/null
+++ b/src/lib/db/migrations/1711449100128_create-slack-schema.ts
@@ -0,0 +1,12 @@
+/* eslint-disable @typescript-eslint/naming-convention */
+import { MigrationBuilder, ColumnDefinitions } from 'node-pg-migrate'
+
+export const shorthands: ColumnDefinitions | undefined = undefined
+
+export async function up(pgm: MigrationBuilder): Promise<void> {
+  pgm.createSchema('slack', { ifNotExists: true })
+}
+
+export async function down(pgm: MigrationBuilder): Promise<void> {
+  pgm.dropSchema('slack', { cascade: true })
+}

diff --git a/src/lib/db/migrations/1711449100128_create-slack-workspace.ts b/src/lib/db/migrations/1711449100128_create-slack-workspace.ts
new file mode 100644
index 0000000..042aa03
--- /dev/null
+++ b/src/lib/db/migrations/1711449100128_create-slack-workspace.ts
@@ -0,0 +1,32 @@
+/* eslint-disable @typescript-eslint/naming-convention */
+import { MigrationBuilder, ColumnDefinitions } from 'node-pg-migrate'
+
+export const shorthands: ColumnDefinitions | undefined = undefined
+
+export async function up(pgm: MigrationBuilder): Promise<void> {
+  return pgm.createTable(
+    { schema: 'slack', name: 'workspace' },
+    {
+      id: 'id',
+      created_at: 'timestamp',
+      updated_at: 'timestamp',
+      ext_slack_team_id: { type: 'text', notNull: true, unique: true },
+      webhook_url: { type: 'text', notNull: true },
+      ext_slack_webhook_channel_id: { type: 'text', notNull: true },
+      slack_access_token: { type: 'text', notNull: true },
+      organization_id: {
+        type: 'integer',
+        unique: true,
+        notNull: true,
+        references: {
+          schema: 'voidpm',
+          name: 'organization',
+        },
+      },
+    },
+  )
+}
+
+export async function down(pgm: MigrationBuilder): Promise<void> {
+  pgm.dropTable('slack.workspace')
+}

diff --git a/src/lib/db/schema/zapatos/schema.d.ts b/src/lib/db/schema/zapatos/schema.d.ts
index 32c2a92..8977da5 100644
--- a/src/lib/db/schema/zapatos/schema.d.ts
+++ b/src/lib/db/schema/zapatos/schema.d.ts
@@ -44,12 +44,6 @@ declare module 'zapatos/schema' {
         */
         ext_clerk_user_id: string;
         /**
-        * **voidpm.organization.ext_gh_install_id**
-        * - `int4` in database
-        * - `NOT NULL`, no default
-        */
-        ext_gh_install_id: number;
-        /**
         * **voidpm.organization.id**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
@@ -76,12 +70,6 @@ declare module 'zapatos/schema' {
         */
         ext_clerk_user_id: string;
         /**
-        * **voidpm.organization.ext_gh_install_id**
-        * - `int4` in database
-        * - `NOT NULL`, no default
-        */
-        ext_gh_install_id: number;
-        /**
         * **voidpm.organization.id**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
@@ -108,12 +96,6 @@ declare module 'zapatos/schema' {
         */
         ext_clerk_user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
         /**
-        * **voidpm.organization.ext_gh_install_id**
-        * - `int4` in database
-        * - `NOT NULL`, no default
-        */
-        ext_gh_install_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
-        /**
         * **voidpm.organization.id**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
@@ -140,12 +122,6 @@ declare module 'zapatos/schema' {
         */
         ext_clerk_user_id: string | db.Parameter<string> | db.SQLFragment;
         /**
-        * **voidpm.organization.ext_gh_install_id**
-        * - `int4` in database
-        * - `NOT NULL`, no default
-        */
-        ext_gh_install_id: number | db.Parameter<number> | db.SQLFragment;
-        /**
         * **voidpm.organization.id**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
@@ -172,12 +148,6 @@ declare module 'zapatos/schema' {
         */
         ext_clerk_user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
         /**
-        * **voidpm.organization.ext_gh_install_id**
-        * - `int4` in database
-        * - `NOT NULL`, no default
-        */
-        ext_gh_install_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
-        /**
         * **voidpm.organization.id**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
@@ -190,7 +160,7 @@ declare module 'zapatos/schema' {
         */
         updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
       }
-      export type UniqueIndex = 'organization_ext_clerk_user_id_key' | 'organization_ext_gh_install_id_key' | 'organization_pkey';
+      export type UniqueIndex = 'organization_ext_clerk_user_id_key' | 'organization_pkey';
       export type Column = keyof Selectable;
       export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
       export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
@@ -225,6 +195,179 @@ declare module 'zapatos/schema' 
diff --git a/src/lib/db/scripts/generate.ts b/src/lib/db/scripts/generate.ts
index a5894f2..a839b4c 100644
--- a/src/lib/db/scripts/generate.ts
+++ b/src/lib/db/scripts/generate.ts
@@ -14,7 +14,7 @@ const database = process.env.POSTGRES_DB
       }),
     },
     schemas: Object.fromEntries(
-      ['voidpm', 'github'].map((s) => [
+      ['voidpm', 'github', 'slack'].map((s) => [
         s,
         {
           include: '*',

diff --git a/src/lib/github/create-github-client.ts b/src/lib/github/create-github-client.ts
index c8fddbc..2c90c02 100644
--- a/src/lib/github/create-github-client.ts
+++ b/src/lib/github/create-github-client.ts
@@ -3,7 +3,7 @@ import { Octokit } from 'octokit'
 import { createAppAuth } from '@octokit/auth-app'
 
 interface CreateGithubClientParams {
-  installationId: string
+  installationId: number
 }
 
 export const privateKey = crypto

diff --git a/src/lib/github/github-webhooks.ts b/src/lib/github/github-webhooks.ts
index 53607de..7359424 100644
--- a/src/lib/github/github-webhooks.ts
+++ b/src/lib/github/github-webhooks.ts
@@ -36,8 +36,13 @@ app.webhooks.on('pull_request.closed', async (params) => {
 
   const organization = await dbClient
     .selectFrom('voidpm.organization')
+    .innerJoin(
+      'github.organization',
+      'github.organization.organization_id',
+      'voidpm.organization.id',
+    )
     .where('ext_gh_install_id', '=', installation?.id!)
-    .select('id')
+    .select('voidpm.organization.id')
     .executeTakeFirst()
 
   if (!organization) {

diff --git a/src/lib/organization/get-org-with-slack-team-id.ts b/src/lib/organization/get-org-with-slack-team-id.ts
new file mode 100644
index 0000000..025c675
--- /dev/null
+++ b/src/lib/organization/get-org-with-slack-team-id.ts
@@ -0,0 +1,19 @@
+import { dbClient } from '@/lib/db/client'
+
+export const findOrgWithSlackTeamId = async (teamId: string) => {
+  return await dbClient
+    .selectFrom('voidpm.organization')
+    .innerJoin(
+      'github.organization',
+      'github.organization.organization_id',
+      'voidpm.organization.id',
+    )
+    .innerJoin(
+      'slack.workspace',
+      'slack.workspace.organization_id',
+      'voidpm.organization.id',
+    )
+    .select(['ext_gh_install_id', 'slack_access_token'])
+    .where('ext_slack_team_id', '=', teamId)
+    .executeTakeFirst()
+}

diff --git a/src/lib/slack/get-access-token.ts b/src/lib/slack/get-access-token.ts
new file mode 100644
index 0000000..1218ce7
--- /dev/null
+++ b/src/lib/slack/get-access-token.ts
@@ -0,0 +1,23 @@
+import { http } from '@/lib/http/client/http'
+import { SlackAccessTokenResponse } from '@/lib/slack/types'
+
+interface GetAccessTokenParams {
+  code: string
+}
+
+export async function GetAccessToken(
+  params: GetAccessTokenParams,
+): Promise<SlackAccessTokenResponse> {
+  const { code } = params
+
+  const data = new FormData()
+
+  data.append('code', code)
+  data.append('client_id', process.env.SLACK_CLIENT_ID!)
+  data.append('client_secret', process.env.SLACK_CLIENT_SECRET!)
+
+  return http.post<SlackAccessTokenResponse>(
+    'https://slack.com/api/oauth.v2.access',
+    data,
+  )
+}

diff --git a/src/lib/slack/get-all-text-messages.ts b/src/lib/slack/get-all-text-messages.ts
new file mode 100644
index 0000000..557518a
--- /dev/null
+++ b/src/lib/slack/get-all-text-messages.ts
@@ -0,0 +1,47 @@
+import { SlackClient } from '@/lib/api/slack/client'
+import { getTextReplies } from '@/lib/slack/get-text-replies'
+import { TextMessageEvent } from '@/lib/slack/types'
+import { MessageEvent } from '@slack/bolt'
+
+interface GetAllTextMessagesParams {
+  channelID: string
+  messages: MessageEvent[]
+  slackClient: SlackClient
+}
+
+export async function GetAllTextMessages(
+  params: GetAllTextMessagesParams,
+): Promise<TextMessageEvent[]> {
+  const { channelID, messages, slackClient } = params
+
+  const result: TextMessageEvent[] = []
+
+  for (const message of messages) {
+    if (!!message.subtype) {
+      continue
+    }
+
+    if ('reply_count' in message) {
+      const textReplies = await getTextReplies({
+        channelID: channelID,
+        messageTS: message.ts,
+        slackClient,
+      })
+
+      for (const reply of textReplies) {
+        result.push(reply)
+      }
+
+      continue
+    }
+
+    if ('text' in message && !!message.text) {
+      result.push({
+        text: message.text,
+      })
+      continue
+    }
+  }
+
+  return result
+}

diff --git a/src/lib/slack/get-message-link.ts b/src/lib/slack/get-message-link.ts
new file mode 100644
index 0000000..2b8ff28
--- /dev/null
+++ b/src/lib/slack/get-message-link.ts
@@ -0,0 +1,17 @@
+import { SlackClient } from '@/lib/api/slack/client'
+
+interface GetMessageLinkParams {
+  channelID: string
+  messageTS: string
+  slackClient: SlackClient
+}
+
+export async function getMessageLink(
+  params: GetMessageLinkParams,
+): Promise<string> {
+  const { channelID, messageTS, slackClient } = params
+  const res = await slackClient.get<{
+    permalink: string
+  }>(`chat.getPermalink?channel=${channelID}&message_ts=${messageTS}`)
+  return res.permalink
+}

diff --git a/src/lib/slack/get-text-replies.ts b/src/lib/slack/get-text-replies.ts
new file mode 100644
index 0000000..5f02ae1
--- /dev/null
+++ b/src/lib/slack/get-text-replies.ts
@@ -0,0 +1,33 @@
+import { SlackClient } from '@/lib/api/slack/client'
+import { Conversation } from '@/lib/slack/types'
+
+interface GetTextRepliesParams {
+  channelID: string
+  messageTS: string
+  slackClient: SlackClient
+}
+
+type TextMessageEvent = {
+  text: string
+}
+
+export async function getTextReplies(
+  params: GetTextRepliesParams,
+): Promise<TextMessageEvent[]> {
+  const { channelID, messageTS, slackClient } = params
+  const replies: Conversation = await slackClient.get(
+    `conversations.replies?channel=${channelID}&ts=${messageTS}`,
+  )
+
+  const textMessages: TextMessageEvent[] = []
+
+  for (const message of replies.messages) {
+    if ('text' in message && !!message.text) {
+      textMessages.push({
+        text: message.text,
+      })
+    }
+  }
+
+  return textMessages
+}

diff --git a/src/lib/slack/types.ts b/src/lib/slack/types.ts
new file mode 100644
index 0000000..ae0fdf5
--- /dev/null
+++ b/src/lib/slack/types.ts
@@ -0,0 +1,25 @@
+import { MessageEvent } from '@slack/bolt'
+
+export type Conversation = {
+  messages: MessageEvent[]
+  ok: boolean
+  latest: string
+}
+
+export type TextMessageEvent = {
+  text: string
+}
+
+export type SlackAccessTokenResponse = {
+  app_id: string
+  access_token: string
+  team: {
+    id: string
+    name: string
+  }
+  incoming_webhook: {
+    url: string
+    channel: string
+    channel_id: string
+  }
+}

diff --git a/src/lib/ui/NavigationMenu.tsx b/src/lib/ui/NavigationMenu.tsx
new file mode 100644
index 0000000..df4a8d0
--- /dev/null
+++ b/src/lib/ui/NavigationMenu.tsx
@@ -0,0 +1,128 @@
+import * as React from 'react'
+import { ChevronDownIcon } from '@radix-ui/react-icons'
+import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'
+import { cva } from 'class-variance-authority'
+
+import { cn } from '@/lib/utils'
+
+const NavigationMenu = React.forwardRef<
+  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
+>(({ className, children, ...props }, ref) => (
+  <NavigationMenuPrimitive.Root
+    ref={ref}
+    className={cn(
+      'relative z-10 flex max-w-max flex-1 items-center justify-center',
+      className,
+    )}
+    {...props}
+  >
+    {children}
+    <NavigationMenuViewport />
+  </NavigationMenuPrimitive.Root>
+))
+NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName
+
+const NavigationMenuList = React.forwardRef<
+  React.ElementRef<typeof NavigationMenuPrimitive.List>,
+  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
+>(({ className, ...props }, ref) => (
+  <NavigationMenuPrimitive.List
+    ref={ref}
+    className={cn(
+      'group flex flex-1 list-none items-center justify-center space-x-1',
+      className,
+    )}
+    {...props}
+  />
+))
+NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName
+
+const NavigationMenuItem = NavigationMenuPrimitive.Item
+
+const navigationMenuTriggerStyle = cva(
+  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50',
+)
+
+const NavigationMenuTrigger = React.forwardRef<
+  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
+  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
+>(({ className, children, ...props }, ref) => (
+  <NavigationMenuPrimitive.Trigger
+    ref={ref}
+    className={cn(navigationMenuTriggerStyle(), 'group', className)}
+    {...props}
+  >
+    {children}{' '}
+    <ChevronDownIcon
+      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
+      aria-hidden="true"
+    />
+  </NavigationMenuPrimitive.Trigger>
+))
+NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName
+
+const NavigationMenuContent = React.forwardRef<
+  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
+>(({ className, ...props }, ref) => (
+  <NavigationMenuPrimitive.Content
+    ref={ref}
+    className={cn(
+      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',
+      className,
+    )}
+    {...props}
+  />
+))
+NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName
+
+const NavigationMenuLink = NavigationMenuPrimitive.Link
+
+const NavigationMenuViewport = React.forwardRef<
+  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
+  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
+>(({ className, ...props }, ref) => (
+  <div className={cn('absolute left-0 top-full flex justify-center')}>
+    <NavigationMenuPrimitive.Viewport
+      className={cn(
+        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreg
diff --git a/src/lib/ui/Sheet.tsx b/src/lib/ui/Sheet.tsx
new file mode 100644
index 0000000..d520f11
--- /dev/null
+++ b/src/lib/ui/Sheet.tsx
@@ -0,0 +1,140 @@
+'use client'
+
+import * as React from 'react'
+import * as SheetPrimitive from '@radix-ui/react-dialog'
+import { Cross2Icon } from '@radix-ui/react-icons'
+import { cva, type VariantProps } from 'class-variance-authority'
+
+import { cn } from '@/lib/utils'
+
+const Sheet = SheetPrimitive.Root
+
+const SheetTrigger = SheetPrimitive.Trigger
+
+const SheetClose = SheetPrimitive.Close
+
+const SheetPortal = SheetPrimitive.Portal
+
+const SheetOverlay = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Overlay>,
+  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
+>(({ className, ...props }, ref) => (
+  <SheetPrimitive.Overlay
+    className={cn(
+      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
+      className,
+    )}
+    {...props}
+    ref={ref}
+  />
+))
+SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
+
+const sheetVariants = cva(
+  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
+  {
+    variants: {
+      side: {
+        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
+        bottom:
+          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
+        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
+        right:
+          'inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
+      },
+    },
+    defaultVariants: {
+      side: 'right',
+    },
+  },
+)
+
+interface SheetContentProps
+  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
+    VariantProps<typeof sheetVariants> {}
+
+const SheetContent = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Content>,
+  SheetContentProps
+>(({ side = 'right', className, children, ...props }, ref) => (
+  <SheetPortal>
+    <SheetOverlay />
+    <SheetPrimitive.Content
+      ref={ref}
+      className={cn(sheetVariants({ side }), className)}
+      {...props}
+    >
+      {children}
+      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
+        <Cross2Icon className="h-4 w-4" />
+        <span className="sr-only">Close</span>
+      </SheetPrimitive.Close>
+    </SheetPrimitive.Content>
+  </SheetPortal>
+))
+SheetContent.displayName = SheetPrimitive.Content.displayName
+
+const SheetHeader = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      'flex flex-col space-y-2 text-center sm:text-left',
+      className,
+    )}
+    {...props}
+  />
+)
+SheetHeader.displayName = 'SheetHeader'
+
+const SheetFooter = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
+      className,
+    )}
+    {...props}
+  />
+)
+SheetFooter.displayName = 'SheetFooter'
+
+const SheetTitle = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Title>,
+  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
+>(({ className, ...props }, ref) => (
+  <SheetPrimitive.Title
+    ref={ref}
+    className={cn('text-lg font-semibold text-foreground', className)}
+    {...props}
+  />
+))
+SheetTitle.displayName = SheetPrimitive
diff --git a/src/middleware.ts b/src/middleware.ts
index 5c467f9..50f0aff 100644
--- a/src/middleware.ts
+++ b/src/middleware.ts
@@ -2,7 +2,13 @@ import { authMiddleware } from '@clerk/nextjs'
 
 export default authMiddleware({
   // Routes that can be accessed while signed out
-  publicRoutes: ['/', '/api/github/webhook'],
+  publicRoutes: [
+    '/',
+    '/api/github/webhook',
+    '/api/slack/event',
+    '/api/slack/interaction',
+    '/slack/install',
+  ],
   // Routes that can always be accessed, and have
   // no authentication information
   ignoredRoutes: [],

diff --git a/src/queue/default-queue.ts b/src/queue/default-queue.ts
new file mode 100644
index 0000000..7504f2f
--- /dev/null
+++ b/src/queue/default-queue.ts
@@ -0,0 +1,24 @@
+import { Job } from '@/queue/jobs'
+import { Worker, Queue } from 'bullmq'
+import Redis from 'ioredis'
+
+const connection = new Redis(process.env.REDIS_URL!, {
+  maxRetriesPerRequest: null,
+})
+
+export const defaultQueueName = 'default'
+
+export const defaultQueue = new Queue<
+  Job['data'],
+  Job['returnvalue'],
+  Job['name']
+>(defaultQueueName, {
+  connection,
+  defaultJobOptions: {
+    attempts: 3,
+    backoff: {
+      type: 'exponential',
+      delay: 5000,
+    },
+  },
+})

diff --git a/src/queue/default-worker.ts b/src/queue/default-worker.ts
new file mode 100644
index 0000000..39463af
--- /dev/null
+++ b/src/queue/default-worker.ts
@@ -0,0 +1,30 @@
+import { defaultQueueName } from '@/queue/default-queue'
+import { handleAskSlackSelectGithubRepoForIssue } from '@/queue/handlers/handle-ask-slack-select-github-repo-for-issue'
+import { handleCreateGithubIssueFromSlack } from '@/queue/handlers/handle-create-github-issue-from-slack'
+import { Job } from '@/queue/jobs'
+import { Worker } from 'bullmq'
+import Redis from 'ioredis'
+
+const connection = new Redis(process.env.REDIS_URL!, {
+  maxRetriesPerRequest: null,
+})
+
+const worker = new Worker(
+  defaultQueueName,
+  async (job: Job) => {
+    switch (job.name) {
+      case 'create_github_issue_from_slack':
+        return await handleCreateGithubIssueFromSlack(job)
+      case 'ask_slack_select_github_repo_for_issue':
+        return await handleAskSlackSelectGithubRepoForIssue(job)
+    }
+  },
+  {
+    connection,
+    concurrency: 5,
+    removeOnComplete: { count: 1000 },
+    removeOnFail: { count: 5000 },
+  },
+)
+
+export default worker

diff --git a/src/queue/handlers/handle-ask-slack-select-github-repo-for-issue.ts b/src/queue/handlers/handle-ask-slack-select-github-repo-for-issue.ts
new file mode 100644
index 0000000..2746be4
--- /dev/null
+++ b/src/queue/handlers/handle-ask-slack-select-github-repo-for-issue.ts
@@ -0,0 +1,98 @@
+import { createSlackClient } from '@/lib/api/slack/client'
+import { createGithubClient } from '@/lib/github/create-github-client'
+import { AskSlackSelectGithubRepoForIssue } from '@/queue/jobs'
+import { http } from '@/lib/http/client/http'
+import { findOrgWithSlackTeamId } from '@/lib/organization/get-org-with-slack-team-id'
+import { ModalView } from '@slack/bolt'
+
+export type CreateGithubIssueSelectedRepoMetadata = {
+  team_id: string
+  channel_id: string
+  target_message_ts: string
+  response_url: string
+}
+
+export async function handleAskSlackSelectGithubRepoForIssue(
+  job: AskSlackSelectGithubRepoForIssue,
+) {
+  const { response_url, team_id, channel_id, target_message_ts, trigger_id } =
+    job.data
+  const organization = await findOrgWithSlackTeamId(team_id)
+
+  if (!organization) {
+    await http.post(response_url, {
+      text: `Error creating issue. Was Void App installed correctly to this workspace?`,
+    })
+
+    return
+  }
+
+  const github = createGithubClient({
+    installationId: organization.ext_gh_install_id,
+  })
+
+  const repos = await github.request('GET /installation/repositories', {
+    headers: {
+      'X-GitHub-Api-Version': '2022-11-28',
+    },
+  })
+
+  const metadata: CreateGithubIssueSelectedRepoMetadata = {
+    team_id,
+    channel_id,
+    target_message_ts,
+    response_url,
+  }
+
+  const modal: ModalView = {
+    type: 'modal',
+    title: {
+      type: 'plain_text',
+      text: 'Select a Github Repo',
+    },
+    callback_id: 'gh_issue_create:selected_repo',
+    blocks: [
+      {
+        block_id: `select_repo_block`,
+        type: 'input',
+        label: {
+          type: 'plain_text',
+          text: 'Repository',
+          emoji: true,
+        },
+        element: {
+          action_id: 'github_repo',
+          type: 'static_select',
+          placeholder: {
+            type: 'plain_text',
+            text: 'Pick one',
+            emoji: true,
+          },
+          options: repos.data.repositories.map((repo) => ({
+            text: {
+              type: 'plain_text',
+              text: repo.name,
+            },
+            value: repo.full_name,
+          })),
+        },
+      },
+    ],
+    private_metadata: JSON.stringify(metadata),
+    submit: {
+      type: 'plain_text',
+      text: 'Create Issue',
+    },
+    close: {
+      type: 'plain_text',
+      text: 'Cancel',
+    },
+  }
+
+  const slackClient = createSlackClient(organization.slack_access_token)
+
+  await slackClient.post('views.open', {
+    trigger_id,
+    view: modal,
+  })
+}

diff --git a/src/queue/handlers/handle-create-github-issue-from-slack.ts b/src/queue/handlers/handle-create-github-issue-from-slack.ts
new file mode 100644
index 0000000..493a707
--- /dev/null
+++ b/src/queue/handlers/handle-create-github-issue-from-slack.ts
@@ -0,0 +1,145 @@
+import { createSlackClient } from '@/lib/api/slack/client'
+import { createGithubClient } from '@/lib/github/create-github-client'
+import { Conversation, TextMessageEvent } from '@/lib/slack/types'
+import { CreateGithubIssueFromSlack } from '@/queue/jobs'
+import { getMessageLink } from '@/lib/slack/get-message-link'
+import { GetAllTextMessages } from '@/lib/slack/get-all-text-messages'
+import { summarizeGithubIssue } from '@/lib/ai/summarize-github-issue'
+import { http } from '@/lib/http/client/http'
+import { findOrgWithSlackTeamId } from '@/lib/organization/get-org-with-slack-team-id'
+
+export async function handleCreateGithubIssueFromSlack(
+  job: CreateGithubIssueFromSlack,
+) {
+  const {
+    team_id,
+    target_message_ts,
+    channel_id,
+    response_url,
+    gh_repo_full_name,
+  } = job.data
+
+  if (!gh_repo_full_name) {
+    await http.post(response_url, {
+      text: `Error creating issue. Missing GitHub repo.`,
+    })
+
+    return
+  }
+
+  const organization = await findOrgWithSlackTeamId(team_id)
+
+  if (!organization) {
+    await http.post(response_url, {
+      text: `Error creating issue. Was Void App installed correctly to this workspace?`,
+    })
+
+    return
+  }
+
+  const slackClient = createSlackClient(organization.slack_access_token)
+
+  const history = await slackClient.post<Conversation>(
+    'conversations.history',
+    {
+      channel: channel_id, // same channel
+      latest: target_message_ts, // start from target message
+      inclusive: true, // include the target message
+      limit: 30, // include the previous 30 messages for context
+    },
+  )
+
+  if (history.messages.length === 0) {
+    return
+  }
+
+  const initialMessage =
+    'text' in history.messages[0] ? history.messages[0].text : 'Message'
+
+  const slackMessageUrl = await getMessageLink({
+    channelID: channel_id,
+    messageTS: history.messages[0].ts,
+    slackClient,
+  })
+
+  // Ignore previous bot messages
+  const userMessages = history.messages.filter(
+    (message) => !('bot_profile' in message),
+  )
+
+  const messages: TextMessageEvent[] = await GetAllTextMessages({
+    channelID: channel_id,
+    messages: userMessages,
+    slackClient,
+  })
+
+  const data = await summarizeGithubIssue({ messages })
+  if (!data) {
+    await http.post(response_url, {
+      text: `Error creating issue for: ${initialMessage}`,
+    })
+    return
+  }
+
+  const { issue, description } = data
+
+  const github = createGithubClient({
+    installationId: organization.ext_gh_install_id,
+  })
+
+  const issueDescription = `**Slack Message:**\n\n[${initialMessage}](${slackMessageUrl})\n\n${description}
+`
+
+  const gh_owner = gh_repo_full_name.split('/')[0] // repo is full name. e.g. 'octocat/hello-world'
+  const gh_repo = gh_repo_full_name.split('/')[1]
+
+  const githubIssue = await github.rest.issues.create({
+    owner: gh_owner,
+    repo: gh_repo,
+    title: issue,
+    body: issueDescription,
+  })
+
+  await slackClient.post('chat.postMessage', {
+    channel: channel_id,
+    blocks: [
+      {
+        type: 'rich_text',
+        elements: [
+          {
+            type: 'rich_text_quote',
+            elements: [
+              {
+                type: 'text',
+                text: 'Github issue created:',
+                style: {
+                  bold: true,
+                },
+              },
+              {
+                type: 'text',
+                text: '\n',
+              },
+              {
+                type: 'html_url' in githubIssue.data ? 'link' : 'text',
+                url:
+                  'html_url' in githubIssue.data
+                    ? githubIssue.data.html_url
+          
diff --git a/src/queue/jobs.ts b/src/queue/jobs.ts
new file mode 100644
index 0000000..b33daaf
--- /dev/null
+++ b/src/queue/jobs.ts
@@ -0,0 +1,27 @@
+import { Job as BullMQJob } from 'bullmq'
+
+export type AskSlackSelectGithubRepoForIssue = BullMQJob<
+  {
+    team_id: string
+    trigger_id: string
+    channel_id: string
+    target_message_ts: string
+    response_url: string
+  },
+  void, // return type
+  'ask_slack_select_github_repo_for_issue'
+>
+
+export type CreateGithubIssueFromSlack = BullMQJob<
+  {
+    team_id: string
+    channel_id: string
+    target_message_ts: string
+    response_url: string
+    gh_repo_full_name: string | null
+  },
+  void, // return type
+  'create_github_issue_from_slack'
+>
+
+export type Job = CreateGithubIssueFromSlack | AskSlackSelectGithubRepoForIssue
