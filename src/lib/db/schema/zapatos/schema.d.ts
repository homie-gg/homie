/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: voidpm === */

  export namespace voidpm {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **voidpm.organization**
     * - Table in database
     */
    export namespace organization {
      export type Table = 'voidpm.organization';
      export interface Selectable {
        /**
        * **voidpm.organization.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **voidpm.organization.ext_clerk_user_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        ext_clerk_user_id: string;
        /**
        * **voidpm.organization.ext_gh_install_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_install_id: number;
        /**
        * **voidpm.organization.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
        */
        id: number;
        /**
        * **voidpm.organization.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **voidpm.organization.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **voidpm.organization.ext_clerk_user_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        ext_clerk_user_id: string;
        /**
        * **voidpm.organization.ext_gh_install_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_install_id: number;
        /**
        * **voidpm.organization.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
        */
        id: number;
        /**
        * **voidpm.organization.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **voidpm.organization.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **voidpm.organization.ext_clerk_user_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        ext_clerk_user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **voidpm.organization.ext_gh_install_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_install_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **voidpm.organization.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **voidpm.organization.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **voidpm.organization.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **voidpm.organization.ext_clerk_user_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        ext_clerk_user_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **voidpm.organization.ext_gh_install_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_install_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **voidpm.organization.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **voidpm.organization.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **voidpm.organization.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **voidpm.organization.ext_clerk_user_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        ext_clerk_user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **voidpm.organization.ext_gh_install_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_install_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **voidpm.organization.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('voidpm.organization_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **voidpm.organization.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'organization_ext_clerk_user_id_key' | 'organization_ext_gh_install_id_key' | 'organization_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = organization.Table;
    export type Selectable = organization.Selectable;
    export type JSONSelectable = organization.JSONSelectable;
    export type Whereable = organization.Whereable;
    export type Insertable = organization.Insertable;
    export type Updatable = organization.Updatable;
    export type UniqueIndex = organization.UniqueIndex;
    export type Column = organization.Column;
  
    export type AllBaseTables = [organization.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [organization.Table];
  }


  /* === schema: github === */

  export namespace github {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **github.pull_request**
     * - Table in database
     */
    export namespace pull_request {
      export type Table = 'github.pull_request';
      export interface Selectable {
        /**
        * **github.pull_request.closed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        closed_at: Date | null;
        /**
        * **github.pull_request.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **github.pull_request.ext_gh_pull_request_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_pull_request_id: number;
        /**
        * **github.pull_request.html_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        html_url: string;
        /**
        * **github.pull_request.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.pull_request_id_seq'::regclass)`
        */
        id: number;
        /**
        * **github.pull_request.merged_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        merged_at: Date | null;
        /**
        * **github.pull_request.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id: number;
        /**
        * **github.pull_request.title**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        title: string;
        /**
        * **github.pull_request.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **github.pull_request.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number;
      }
      export interface JSONSelectable {
        /**
        * **github.pull_request.closed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        closed_at: db.TimestampTzString | null;
        /**
        * **github.pull_request.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **github.pull_request.ext_gh_pull_request_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_pull_request_id: number;
        /**
        * **github.pull_request.html_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        html_url: string;
        /**
        * **github.pull_request.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.pull_request_id_seq'::regclass)`
        */
        id: number;
        /**
        * **github.pull_request.merged_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        merged_at: db.TimestampTzString | null;
        /**
        * **github.pull_request.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id: number;
        /**
        * **github.pull_request.title**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        title: string;
        /**
        * **github.pull_request.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **github.pull_request.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number;
      }
      export interface Whereable {
        /**
        * **github.pull_request.closed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        closed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.ext_gh_pull_request_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_pull_request_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.html_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        html_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.pull_request_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.merged_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        merged_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.title**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.pull_request.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **github.pull_request.closed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        closed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **github.pull_request.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **github.pull_request.ext_gh_pull_request_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_pull_request_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **github.pull_request.html_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        html_url: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **github.pull_request.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.pull_request_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **github.pull_request.merged_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        merged_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **github.pull_request.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **github.pull_request.title**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        title: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **github.pull_request.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **github.pull_request.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **github.pull_request.closed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        closed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **github.pull_request.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **github.pull_request.ext_gh_pull_request_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_pull_request_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **github.pull_request.html_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        html_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **github.pull_request.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.pull_request_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **github.pull_request.merged_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        merged_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **github.pull_request.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **github.pull_request.title**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **github.pull_request.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **github.pull_request.user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        user_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'pull_request_ext_gh_pull_request_id_key' | 'pull_request_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **github.user**
     * - Table in database
     */
    export namespace user {
      export type Table = 'github.user';
      export interface Selectable {
        /**
        * **github.user.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **github.user.ext_gh_user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_user_id: number;
        /**
        * **github.user.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.user_id_seq'::regclass)`
        */
        id: number;
        /**
        * **github.user.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id: number;
        /**
        * **github.user.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **github.user.username**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        username: string;
      }
      export interface JSONSelectable {
        /**
        * **github.user.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **github.user.ext_gh_user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_user_id: number;
        /**
        * **github.user.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.user_id_seq'::regclass)`
        */
        id: number;
        /**
        * **github.user.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id: number;
        /**
        * **github.user.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **github.user.username**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        username: string;
      }
      export interface Whereable {
        /**
        * **github.user.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.user.ext_gh_user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.user.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.user_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.user.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.user.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **github.user.username**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **github.user.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **github.user.ext_gh_user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_user_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **github.user.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.user_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **github.user.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **github.user.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **github.user.username**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        username: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **github.user.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **github.user.ext_gh_user_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        ext_gh_user_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **github.user.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('github.user_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **github.user.organization_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        organization_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **github.user.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **github.user.username**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'user_ext_gh_user_id_key' | 'user_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = pull_request.Table | user.Table;
    export type Selectable = pull_request.Selectable | user.Selectable;
    export type JSONSelectable = pull_request.JSONSelectable | user.JSONSelectable;
    export type Whereable = pull_request.Whereable | user.Whereable;
    export type Insertable = pull_request.Insertable | user.Insertable;
    export type Updatable = pull_request.Updatable | user.Updatable;
    export type UniqueIndex = pull_request.UniqueIndex | user.UniqueIndex;
    export type Column = pull_request.Column | user.Column;
  
    export type AllBaseTables = [pull_request.Table, user.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [pull_request.Table, user.Table];
  }


  /* === global aggregate types === */

  export type Schema = 'voidpm' | 'github';
  export type Table = voidpm.Table | github.Table;
  export type Selectable = voidpm.Selectable | github.Selectable;
  export type JSONSelectable = voidpm.JSONSelectable | github.JSONSelectable;
  export type Whereable = voidpm.Whereable | github.Whereable;
  export type Insertable = voidpm.Insertable | github.Insertable;
  export type Updatable = voidpm.Updatable | github.Updatable;
  export type UniqueIndex = voidpm.UniqueIndex | github.UniqueIndex;
  export type Column = voidpm.Column | github.Column;

  export type AllSchemas = ['voidpm', 'github'];
  export type AllBaseTables = [...voidpm.AllBaseTables, ...github.AllBaseTables];
  export type AllForeignTables = [...voidpm.AllForeignTables, ...github.AllForeignTables];
  export type AllViews = [...voidpm.AllViews, ...github.AllViews];
  export type AllMaterializedViews = [...voidpm.AllMaterializedViews, ...github.AllMaterializedViews];
  export type AllTablesAndViews = [...voidpm.AllTablesAndViews, ...github.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.Selectable;
    "github.pull_request": github.pull_request.Selectable;
    "github.user": github.user.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.JSONSelectable;
    "github.pull_request": github.pull_request.JSONSelectable;
    "github.user": github.user.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.Whereable;
    "github.pull_request": github.pull_request.Whereable;
    "github.user": github.user.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.Insertable;
    "github.pull_request": github.pull_request.Insertable;
    "github.user": github.user.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.Updatable;
    "github.pull_request": github.pull_request.Updatable;
    "github.user": github.user.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.UniqueIndex;
    "github.pull_request": github.pull_request.UniqueIndex;
    "github.user": github.user.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.Column;
    "github.pull_request": github.pull_request.Column;
    "github.user": github.user.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "voidpm.organization": voidpm.organization.SQL;
    "github.pull_request": github.pull_request.SQL;
    "github.user": github.user.SQL;
  }[T];

}
